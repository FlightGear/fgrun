// generated by Fast Light User Interface Designer (fluid) version 1.0100

#ifndef ui_h
#define ui_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <string.h>
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Menu_Bar.H>

class UserInterface {
public:
  UserInterface();
private:
  Fl_Window *main_window;
  Fl_Button *quit;
  inline void cb_quit_i(Fl_Button*, void*);
  static void cb_quit(Fl_Button*, void*);
  Fl_Button *save;
  inline void cb_save_i(Fl_Button*, void*);
  static void cb_save(Fl_Button*, void*);
  Fl_Button *run;
  inline void cb_run_i(Fl_Button*, void*);
  static void cb_run(Fl_Button*, void*);
public:
  Fl_Input *fg_exe;
private:
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  Fl_Input *fg_root;
  Fl_Input *fg_scenery;
private:
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
public:
  Fl_Choice *airport;
  Fl_Choice *aircraft;
  Fl_Tabs *tabs;
  Fl_Group *general_tab;
  Fl_Check_Button *enable_game_mode;
  Fl_Check_Button *enable_splash_screen;
  Fl_Check_Button *enable_intro_music;
  Fl_Check_Button *enable_mouse_pointer;
  Fl_Check_Button *enable_random_objects;
  Fl_Check_Button *freeze;
  Fl_Check_Button *fuel_freeze;
  Fl_Check_Button *clock_freeze;
  Fl_Choice *control;
  static Fl_Menu_Item menu_control[];
  Fl_Check_Button *auto_coordination;
  Fl_Input *browser;
private:
  inline void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
public:
  Fl_Round_Button *units_feet;
  Fl_Round_Button *units_meters;
  Fl_Check_Button *enable_hud;
private:
  inline void cb_enable_hud_i(Fl_Check_Button*, void*);
  static void cb_enable_hud(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *enable_panel;
  Fl_Check_Button *enable_sound;
  Fl_Check_Button *enable_antialias_hud;
  Fl_Round_Button *fog_disabled;
  Fl_Round_Button *fog_fastest;
  Fl_Round_Button *fog_nicest;
  Fl_Check_Button *enable_clouds;
  Fl_Check_Button *enable_clouds3d;
  Fl_Check_Button *enable_fullscreen;
  Fl_Check_Button *enable_skyblend;
  Fl_Check_Button *enable_textures;
  Fl_Check_Button *enable_wireframe;
  Fl_Value_Input *fov;
  Fl_Check_Button *shading_flat;
  Fl_Choice *fdm;
private:
  inline void cb_fdm_i(Fl_Choice*, void*);
  static void cb_fdm(Fl_Choice*, void*);
  static Fl_Menu_Item menu_fdm[];
public:
  Fl_Value_Input *model_hz;
  Fl_Value_Input *speed;
  Fl_Check_Button *notrim;
  Fl_Round_Button *on_ground;
  Fl_Round_Button *in_air;
  Fl_Round_Button *time_offset;
private:
  inline void cb_time_offset_i(Fl_Round_Button*, void*);
  static void cb_time_offset(Fl_Round_Button*, void*);
public:
  Fl_Input *time_offset_text;
  Fl_Round_Button *time_match_real;
private:
  inline void cb_time_match_real_i(Fl_Round_Button*, void*);
  static void cb_time_match_real(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *time_match_local;
private:
  inline void cb_time_match_local_i(Fl_Round_Button*, void*);
  static void cb_time_match_local(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *start_date_sys;
private:
  inline void cb_start_date_sys_i(Fl_Round_Button*, void*);
  static void cb_start_date_sys(Fl_Round_Button*, void*);
public:
  Fl_Input *start_date_sys_text;
  Fl_Round_Button *start_date_lat;
private:
  inline void cb_start_date_lat_i(Fl_Round_Button*, void*);
  static void cb_start_date_lat(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *start_date_gmt;
private:
  inline void cb_start_date_gmt_i(Fl_Round_Button*, void*);
  static void cb_start_date_gmt(Fl_Round_Button*, void*);
public:
  Fl_Input *start_date_lat_text;
  Fl_Input *start_date_gmt_text;
  Fl_Browser *io_options_list;
private:
  inline void cb_io_options_list_i(Fl_Browser*, void*);
  static void cb_io_options_list(Fl_Browser*, void*);
  inline void cb_Add_i(Fl_Button*, void*);
  static void cb_Add(Fl_Button*, void*);
public:
  Fl_Button *io_edit;
private:
  inline void cb_io_edit_i(Fl_Button*, void*);
  static void cb_io_edit(Fl_Button*, void*);
public:
  Fl_Button *io_delete;
private:
  inline void cb_io_delete_i(Fl_Button*, void*);
  static void cb_io_delete(Fl_Button*, void*);
public:
  Fl_Check_Button *httpd;
private:
  inline void cb_httpd_i(Fl_Check_Button*, void*);
  static void cb_httpd(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *props;
private:
  inline void cb_props_i(Fl_Check_Button*, void*);
  static void cb_props(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *jpg_httpd;
private:
  inline void cb_jpg_httpd_i(Fl_Check_Button*, void*);
  static void cb_jpg_httpd(Fl_Check_Button*, void*);
public:
  Fl_Input *httpd_port;
  Fl_Input *props_port;
  Fl_Input *jpg_httpd_port;
  Fl_Browser *props_list;
private:
  inline void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
  inline void cb_Update_i(Fl_Button*, void*);
  static void cb_Update(Fl_Button*, void*);
  inline void cb_Update1_i(Fl_Button*, void*);
  static void cb_Update1(Fl_Button*, void*);
public:
  Fl_Window *addOptionDlg;
  Fl_Choice *io_protocol;
  static Fl_Menu_Item menu_io_protocol[];
  Fl_Choice *io_medium;
private:
  inline void cb_io_medium_i(Fl_Choice*, void*);
  static void cb_io_medium(Fl_Choice*, void*);
  static Fl_Menu_Item menu_io_medium[];
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Button *io_option_ok;
private:
  inline void cb_io_option_ok_i(Fl_Button*, void*);
  static void cb_io_option_ok(Fl_Button*, void*);
public:
  Fl_Value_Input *io_hz;
  Fl_Choice *io_dir;
  static Fl_Menu_Item menu_io_dir[];
  Fl_Group *file_group;
  Fl_Input *file_name;
  Fl_Button *file_button;
  Fl_Group *serial_group;
  Fl_Input *serial_port;
  Fl_Input *serial_baud;
  Fl_Group *socket_group;
  Fl_Input *socket_hostname;
  Fl_Value_Input *socket_port;
  Fl_Round_Button *socket_tcp;
  Fl_Round_Button *socket_udp;
  Fl_Window *propertyDlg;
  Fl_Input *prop_name;
  Fl_Input *prop_value;
private:
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Window *output_window;
  Fl_Text_Display *output_text;
  static Fl_Menu_Item menu_[];
private:
  inline void cb_Close_i(Fl_Menu_*, void*);
  static void cb_Close(Fl_Menu_*, void*);
public:
  void show();
  void hide();
  virtual void load_settings();
  virtual void save_settings();
  virtual void reset();
  virtual void run_fgfs();
  virtual void update_airports();
  virtual void update_aircraft();
  virtual void select_fg_exe();
  virtual void select_fg_root();
  virtual void select_fg_scenery();
  virtual void select_browser();
  virtual void add_io_item();
  virtual void edit_io_item();
  virtual void delete_io_item();
  virtual void OptionDlg_ok_cb();
  virtual void io_medium_cb(Fl_Choice*, void*);
  virtual void propertyDlg_ok();
  virtual void propertyDlg_cancel();
};
#endif
