// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "i18n.h"
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "wizard.h"
#include "folder_open.xpm"

void Wizard::cb_fg_exe__i(Fl_Input*, void*) {
  fg_exe_update_cb();
}
void Wizard::cb_fg_exe_(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_fg_exe__i(o,v);
}

void Wizard::cb__i(Fl_Button*, void*) {
  fg_exe_select_cb();
}
void Wizard::cb_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void Wizard::cb_fg_root__i(Fl_Input*, void*) {
  fg_root_update_cb();
}
void Wizard::cb_fg_root_(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_fg_root__i(o,v);
}

void Wizard::cb_1_i(Fl_Button*, void*) {
  fg_root_select_cb();
}
void Wizard::cb_1(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void Wizard::cb_aircraft_dir_list__i(Fl_Browser*, void*) {
  aircraft_dir_select_cb();
}
void Wizard::cb_aircraft_dir_list_(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_aircraft_dir_list__i(o,v);
}

void Wizard::cb_Add_i(Fl_Button*, void*) {
  aircraft_dir_add_cb();
}
void Wizard::cb_Add(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void Wizard::cb_aircraft_dir_delete__i(Fl_Button*, void*) {
  aircraft_dir_delete_cb();
}
void Wizard::cb_aircraft_dir_delete_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_aircraft_dir_delete__i(o,v);
}

void Wizard::cb_scenery_dir_list__i(Fl_Browser*, void*) {
  scenery_dir_select_cb();
}
void Wizard::cb_scenery_dir_list_(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_list__i(o,v);
}

void Wizard::cb_Add1_i(Fl_Button*, void*) {
  scenery_dir_add_cb();
}
void Wizard::cb_Add1(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Add1_i(o,v);
}

void Wizard::cb_scenery_dir_delete__i(Fl_Button*, void*) {
  scenery_dir_delete_cb();
}
void Wizard::cb_scenery_dir_delete_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_delete__i(o,v);
}

void Wizard::cb_TerraSync_i(Fl_Button*, void*) {
  ts_dir_cb();
}
void Wizard::cb_TerraSync(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_TerraSync_i(o,v);
}

void Wizard::cb_scenery_dir_up__i(Fl_Button*, void*) {
  scenery_dir_up_cb();
}
void Wizard::cb_scenery_dir_up_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_up__i(o,v);
}

void Wizard::cb_scenery_dir_down__i(Fl_Button*, void*) {
  scenery_dir_down_cb();
}
void Wizard::cb_scenery_dir_down_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_down__i(o,v);
}

void Wizard::cb_cache_delete__i(Fl_Button*, void*) {
  delete_cache_file_cb();
}
void Wizard::cb_cache_delete_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_cache_delete__i(o,v);
}

void Wizard::cb_ts_exe__i(Fl_Input*, void*) {
  ts_exe_update_cb();
}
void Wizard::cb_ts_exe_(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_ts_exe__i(o,v);
}

void Wizard::cb_2_i(Fl_Button*, void*) {
  ts_exe_select_cb();
}
void Wizard::cb_2(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void Wizard::cb_aircraft_i(Fl_Browser*, void*) {
  preview_aircraft();
}
void Wizard::cb_aircraft(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_aircraft_i(o,v);
}

void Wizard::cb_start_viewer_i(Fl_Button*, void*) {
  start_viewer_cb();
}
void Wizard::cb_start_viewer(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_start_viewer_i(o,v);
}

void Wizard::cb_Scenery_i(Fl_Button*, void*) {
  scenery_prefetch_cb();
}
void Wizard::cb_Scenery(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Scenery_i(o,v);
}

void Wizard::cb_Advanced_i(Fl_Button*, void*) {
  advanced_cb();
}
void Wizard::cb_Advanced(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Advanced_i(o,v);
}

void Wizard::cb_show_cmd_line_i(Fl_Check_Button*, void*) {
  show_cmd_line_cb();
}
void Wizard::cb_show_cmd_line(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_show_cmd_line_i(o,v);
}

void Wizard::cb_resolution_i(Fl_Choice*, void*) {
  resolution_cb();
}
void Wizard::cb_resolution(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_resolution_i(o,v);
}

Fl_Menu_Item Wizard::menu_resolution[] = {
 {_("800x600"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1024x768"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1280x1024"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1600x1200"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1280x800"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1680x1050"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1920x1200"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Wizard::cb_game_mode_i(Fl_Check_Button*, void*) {
  game_mode_cb();
}
void Wizard::cb_game_mode(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_game_mode_i(o,v);
}

void Wizard::cb_horizon_effect_i(Fl_Check_Button*, void*) {
  horizon_effect_cb();
}
void Wizard::cb_horizon_effect(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_horizon_effect_i(o,v);
}

void Wizard::cb_enhanced_lighting_i(Fl_Check_Button*, void*) {
  enhanced_lighting_cb();
}
void Wizard::cb_enhanced_lighting(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_enhanced_lighting_i(o,v);
}

void Wizard::cb_specular_highlight_i(Fl_Check_Button*, void*) {
  specular_highlight_cb();
}
void Wizard::cb_specular_highlight(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_specular_highlight_i(o,v);
}

void Wizard::cb_frame_rate_limiter_i(Fl_Check_Button*, void*) {
  frame_rate_limiter_cb();
}
void Wizard::cb_frame_rate_limiter(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_frame_rate_limiter_i(o,v);
}

void Wizard::cb_frame_rate_limiter_value_i(Fl_Value_Input*, void*) {
  frame_rate_limiter_value_cb();
}
void Wizard::cb_frame_rate_limiter_value(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_frame_rate_limiter_value_i(o,v);
}

void Wizard::cb_clouds_3d_i(Fl_Check_Button*, void*) {
  clouds_3d_cb();
}
void Wizard::cb_clouds_3d(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clouds_3d_i(o,v);
}

void Wizard::cb_bpp_i(Fl_Choice*, void*) {
  bpp_cb();
}
void Wizard::cb_bpp(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bpp_i(o,v);
}

Fl_Menu_Item Wizard::menu_bpp[] = {
 {_("32"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("24"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("16"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Wizard::cb_random_objects_i(Fl_Check_Button*, void*) {
  random_objects_cb();
}
void Wizard::cb_random_objects(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_random_objects_i(o,v);
}

void Wizard::cb_random_trees_i(Fl_Check_Button*, void*) {
  random_trees_cb();
}
void Wizard::cb_random_trees(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_random_trees_i(o,v);
}

void Wizard::cb_ai_models_i(Fl_Check_Button*, void*) {
  ai_models_cb();
}
void Wizard::cb_ai_models(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ai_models_i(o,v);
}

void Wizard::cb_time_of_day_i(Fl_Check_Button*, void*) {
  time_of_day_cb();
}
void Wizard::cb_time_of_day(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_time_of_day_i(o,v);
}

void Wizard::cb_time_of_day_value_i(Fl_Choice*, void*) {
  time_of_day_value_cb();
}
void Wizard::cb_time_of_day_value(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_time_of_day_value_i(o,v);
}

void Wizard::cb_real_weather_fetch_i(Fl_Check_Button*, void*) {
  real_weather_fetch_cb();
}
void Wizard::cb_real_weather_fetch(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_real_weather_fetch_i(o,v);
}

void Wizard::cb_auto_coordination_i(Fl_Check_Button*, void*) {
  auto_coordination_cb();
}
void Wizard::cb_auto_coordination(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_auto_coordination_i(o,v);
}

void Wizard::cb_season_i(Fl_Choice*, void*) {
  season_cb();
}
void Wizard::cb_season(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_season_i(o,v);
}

void Wizard::cb_auto_visibility_i(Fl_Check_Button*, void*) {
  auto_visibility_cb();
}
void Wizard::cb_auto_visibility(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_auto_visibility_i(o,v);
}

void Wizard::cb_scenarii_i(Fl_Browser*, void*) {
  scenarii_cb();
}
void Wizard::cb_scenarii(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_scenarii_i(o,v);
}

void Wizard::cb_Deselect_i(Fl_Button*, void*) {
  deselect_all_scenarii_cb();
}
void Wizard::cb_Deselect(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Deselect_i(o,v);
}

void Wizard::cb_terrasync_i(Fl_Check_Button*, void*) {
  terrasync_cb();
}
void Wizard::cb_terrasync(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_terrasync_i(o,v);
}

void Wizard::cb_terrasync_port_i(Fl_Value_Input*, void*) {
  terrasync_port_cb();
}
void Wizard::cb_terrasync_port(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_terrasync_port_i(o,v);
}

void Wizard::cb_atlas_i(Fl_Check_Button*, void*) {
  atlas_cb();
}
void Wizard::cb_atlas(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_atlas_i(o,v);
}

void Wizard::cb_atlas_host_i(Fl_Input*, void*) {
  atlas_host_cb();
}
void Wizard::cb_atlas_host(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_atlas_host_i(o,v);
}

void Wizard::cb_atlas_port_i(Fl_Value_Input*, void*) {
  atlas_port_cb();
}
void Wizard::cb_atlas_port(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_atlas_port_i(o,v);
}

void Wizard::cb_multiplay_i(Fl_Check_Button*, void*) {
  multiplay_cb();
}
void Wizard::cb_multiplay(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_i(o,v);
}

void Wizard::cb_multiplay_callsign_i(Fl_Input*, void*) {
  multiplay_callsign_cb();
}
void Wizard::cb_multiplay_callsign(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_callsign_i(o,v);
}

void Wizard::cb_multiplay_host_i(Fl_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_host(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_host_i(o,v);
}

void Wizard::cb_multiplay_in_i(Fl_Value_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_in(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_in_i(o,v);
}

void Wizard::cb_multiplay_out_i(Fl_Value_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_out(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_out_i(o,v);
}

void Wizard::cb_prev_i(Fl_Button*, void*) {
  prev_cb();
}
void Wizard::cb_prev(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_prev_i(o,v);
}

void Wizard::cb_next_i(Fl_Button*, void*) {
  next_cb();
}
void Wizard::cb_next(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_next_i(o,v);
}

void Wizard::cb_cancel_i(Fl_Button*, void*) {
  cancel_cb();
}
void Wizard::cb_cancel(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_cancel_i(o,v);
}

void Wizard::cb_defaults_i(Fl_Button*, void*) {
  defaults_cb();
}
void Wizard::cb_defaults(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_defaults_i(o,v);
}

void Wizard::cb_Save_i(Fl_Button*, void*) {
  save_preferences_cb();
}
void Wizard::cb_Save(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void Wizard::cb_Load_i(Fl_Button*, void*) {
  load_preferences_cb();
}
void Wizard::cb_Load(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

void Wizard::cb_OK_i(Fl_Button*, void*) {
  crash_ok_cb();
}
void Wizard::cb_OK(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void Wizard::cb_Cancel_i(Fl_Button*, void*) {
  prefetch_cancel_cb();
}
void Wizard::cb_Cancel(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void Wizard::cb_OK1_i(Fl_Button*, void*) {
  prefetch_ok_cb();
}
void Wizard::cb_OK1(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_OK1_i(o,v);
}

Wizard::Wizard() : prefs( Fl_Preferences::USER, "flightgear.org", "fgrun" ), logwin(0), folder_open_pixmap(folder_open_xpm), adv(0), fgThread(0), tsThread(0), fgPid(0), tsPid(0) {
  { win = new Fl_Double_Window(800, 600, _("FlightGear Wizard"));
    win->user_data((void*)(this));
    { wiz = new Fl_Wizard(0, 0, 800, 560);
      { page[0] = new Fl_Group(0, 0, 800, 560, _("Select Paths"));
        page[0]->labelfont(1);
        page[0]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        page[0]->hide();
        { about_ = new Fl_Help_View(5, 25, 790, 130);
          about_->labeltype(FL_NO_LABEL);
        } // Fl_Help_View* about_
        { fg_exe_ = new Fl_Input(130, 175, 495, 25, _("Executable:"));
          fg_exe_->tooltip(_("Full pathname to FlightGear executable"));
          fg_exe_->labelsize(12);
          fg_exe_->textsize(12);
          fg_exe_->callback((Fl_Callback*)cb_fg_exe_);
          fg_exe_->when(FL_WHEN_ENTER_KEY);
        } // Fl_Input* fg_exe_
        { Fl_Button* o = new Fl_Button(630, 175, 25, 25);
          o->tooltip(_("Full pathname to FlightGear executable"));
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_);
          o->image(folder_open_pixmap);
        } // Fl_Button* o
        { fg_root_ = new Fl_Input(130, 205, 495, 25, _("FG_ROOT:"));
          fg_root_->tooltip(_("root data path"));
          fg_root_->labelsize(12);
          fg_root_->textsize(12);
          fg_root_->callback((Fl_Callback*)cb_fg_root_);
          fg_root_->when(FL_WHEN_CHANGED);
        } // Fl_Input* fg_root_
        { Fl_Button* o = new Fl_Button(630, 205, 25, 25);
          o->tooltip(_("root data path"));
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_1);
          o->image(folder_open_pixmap);
        } // Fl_Button* o
        { Fl_Group* o = new Fl_Group(130, 235, 495, 225);
          { Fl_Group* o = new Fl_Group(130, 235, 495, 115);
            { aircraft_dir_list_ = new Fl_Browser(130, 235, 495, 80, _("FG_AIRCRAFT:"));
              aircraft_dir_list_->tooltip(_("Aircraft directories"));
              aircraft_dir_list_->type(2);
              aircraft_dir_list_->labelsize(12);
              aircraft_dir_list_->textsize(12);
              aircraft_dir_list_->callback((Fl_Callback*)cb_aircraft_dir_list_);
              aircraft_dir_list_->align(Fl_Align(FL_ALIGN_LEFT));
              Fl_Group::current()->resizable(aircraft_dir_list_);
            } // Fl_Browser* aircraft_dir_list_
            { Fl_Group* o = new Fl_Group(130, 320, 495, 25);
              { Fl_Button* o = new Fl_Button(130, 320, 100, 25, _("Add..."));
                o->tooltip(_("Add an aircraft directory"));
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_Add);
              } // Fl_Button* o
              { aircraft_dir_delete_ = new Fl_Button(235, 320, 100, 25, _("Delete"));
                aircraft_dir_delete_->tooltip(_("Delete an aircraft directory"));
                aircraft_dir_delete_->labelsize(12);
                aircraft_dir_delete_->callback((Fl_Callback*)cb_aircraft_dir_delete_);
                aircraft_dir_delete_->deactivate();
              } // Fl_Button* aircraft_dir_delete_
              { Fl_Box* o = new Fl_Box(340, 320, 285, 25);
                Fl_Group::current()->resizable(o);
              } // Fl_Box* o
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(130, 350, 495, 110);
            { scenery_dir_list_ = new Fl_Browser(130, 350, 495, 80, _("FG_SCENERY:"));
              scenery_dir_list_->tooltip(_("Scenery directories"));
              scenery_dir_list_->type(2);
              scenery_dir_list_->labelsize(12);
              scenery_dir_list_->textsize(12);
              scenery_dir_list_->callback((Fl_Callback*)cb_scenery_dir_list_);
              scenery_dir_list_->align(Fl_Align(FL_ALIGN_LEFT));
              Fl_Group::current()->resizable(scenery_dir_list_);
            } // Fl_Browser* scenery_dir_list_
            { Fl_Group* o = new Fl_Group(130, 435, 495, 25);
              { Fl_Button* o = new Fl_Button(130, 435, 100, 25, _("Add..."));
                o->tooltip(_("Add a scenery directory"));
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_Add1);
              } // Fl_Button* o
              { scenery_dir_delete_ = new Fl_Button(235, 435, 100, 25, _("Delete"));
                scenery_dir_delete_->tooltip(_("Delete a scenery directory"));
                scenery_dir_delete_->labelsize(12);
                scenery_dir_delete_->callback((Fl_Callback*)cb_scenery_dir_delete_);
                scenery_dir_delete_->deactivate();
              } // Fl_Button* scenery_dir_delete_
              { Fl_Box* o = new Fl_Box(355, 435, 50, 25);
                Fl_Group::current()->resizable(o);
              } // Fl_Box* o
              { Fl_Button* o = new Fl_Button(485, 435, 140, 25, _("TerraSync directory"));
                o->tooltip(_("Select the line in the FG_SCENERY list that is the TerraSync directory."));
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_TerraSync);
              } // Fl_Button* o
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(630, 350, 25, 40);
          { scenery_dir_up_ = new Fl_Button(630, 365, 25, 25, _("@8>"));
            scenery_dir_up_->tooltip(_("Move scenery directory up"));
            scenery_dir_up_->callback((Fl_Callback*)cb_scenery_dir_up_);
            scenery_dir_up_->deactivate();
          } // Fl_Button* scenery_dir_up_
          { Fl_Box* o = new Fl_Box(630, 350, 25, 15);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(630, 390, 25, 40);
          { scenery_dir_down_ = new Fl_Button(630, 395, 25, 25, _("@2>"));
            scenery_dir_down_->tooltip(_("Move scenery directory down"));
            scenery_dir_down_->callback((Fl_Callback*)cb_scenery_dir_down_);
            scenery_dir_down_->deactivate();
          } // Fl_Button* scenery_dir_down_
          { Fl_Box* o = new Fl_Box(630, 420, 25, 10);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { cache_delete_ = new Fl_Button(630, 505, 60, 25, _("Delete"));
          cache_delete_->tooltip(_("Clear the content of the airport cache"));
          cache_delete_->labelsize(12);
          cache_delete_->callback((Fl_Callback*)cb_cache_delete_);
          cache_delete_->deactivate();
        } // Fl_Button* cache_delete_
        { cache_file_ = new Fl_Output(130, 505, 495, 25, _("Airports Cache:"));
          cache_file_->tooltip(_("Full path to the airport cache"));
          cache_file_->labelsize(12);
          cache_file_->textsize(12);
        } // Fl_Output* cache_file_
        { ts_exe_ = new Fl_Input(130, 470, 495, 25, _("Terrasync exe:"));
          ts_exe_->tooltip(_("Full pathname to Terrasync executable"));
          ts_exe_->labelsize(12);
          ts_exe_->textsize(12);
          ts_exe_->callback((Fl_Callback*)cb_ts_exe_);
          ts_exe_->when(FL_WHEN_ENTER_KEY);
        } // Fl_Input* ts_exe_
        { Fl_Button* o = new Fl_Button(630, 470, 25, 25);
          o->tooltip(_("Full pathname to Terrasync executable"));
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_2);
          o->image(folder_open_pixmap);
        } // Fl_Button* o
        page[0]->end();
      } // Fl_Group* page[0]
      { page[1] = new Fl_Group(0, 0, 800, 560, _("Select an aircraft"));
        page[1]->labelfont(1);
        page[1]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        page[1]->hide();
        { Fl_Tile* o = new Fl_Tile(0, 20, 795, 500);
          { aircraft = new Fl_Browser(5, 20, 200, 500);
            aircraft->type(2);
            aircraft->labelsize(12);
            aircraft->textsize(12);
            aircraft->callback((Fl_Callback*)cb_aircraft);
            aircraft->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* aircraft
          { preview = new Fl_OSG(205, 20, 590, 500, _("Preview"));
            preview->box(FL_THIN_DOWN_BOX);
            preview->color(FL_BACKGROUND_COLOR);
            preview->selection_color(FL_BACKGROUND_COLOR);
            preview->labeltype(FL_NORMAL_LABEL);
            preview->labelfont(0);
            preview->labelsize(12);
            preview->labelcolor(FL_FOREGROUND_COLOR);
            preview->align(Fl_Align(FL_ALIGN_CENTER));
            preview->when(FL_WHEN_RELEASE);
          } // Fl_OSG* preview
          { Fl_Box* o = new Fl_Box(80, 190, 265, 65);
            o->hide();
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Tile* o
        { Fl_Group* o = new Fl_Group(5, 520, 790, 35);
          o->box(FL_DOWN_BOX);
          { aircraft_status = new Fl_Output(115, 525, 135, 25, _("Status :"));
          } // Fl_Output* aircraft_status
          { aircraft_author = new Fl_Output(385, 525, 305, 25, _("Author(s) :"));
            Fl_Group::current()->resizable(aircraft_author);
          } // Fl_Output* aircraft_author
          { start_viewer = new Fl_Button(695, 525, 95, 25, _("Viewer"));
            start_viewer->callback((Fl_Callback*)cb_start_viewer);
          } // Fl_Button* start_viewer
          o->end();
        } // Fl_Group* o
        page[1]->end();
      } // Fl_Group* page[1]
      { page[2] = new Fl_Group(0, 0, 800, 560, _("Select a location"));
        page[2]->labelfont(1);
        page[2]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        page[2]->hide();
        { airports_ = new AirportBrowser(5, 25, 790, 475);
          airports_->box(FL_NO_BOX);
          airports_->color(FL_BACKGROUND_COLOR);
          airports_->selection_color(FL_BACKGROUND_COLOR);
          airports_->labeltype(FL_NORMAL_LABEL);
          airports_->labelfont(0);
          airports_->labelsize(14);
          airports_->labelcolor(FL_FOREGROUND_COLOR);
          airports_->align(Fl_Align(FL_ALIGN_CENTER));
          airports_->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(airports_);
        } // AirportBrowser* airports_
        { Fl_Group* o = new Fl_Group(5, 505, 790, 50);
          { carrier_group = new Fl_Group(5, 505, 635, 50, _("Carrier Ops"));
            carrier_group->box(FL_ENGRAVED_FRAME);
            carrier_group->labelfont(1);
            carrier_group->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            { carrier_ = new Fl_Input(145, 520, 175, 25, _("Carrier : "));
            } // Fl_Input* carrier_
            { parkpos_ = new Fl_Input(460, 520, 175, 25, _("Park pos :"));
              parkpos_->tooltip(_("Only valid if carrier is set. For airport parking, use the list above."));
            } // Fl_Input* parkpos_
            { Fl_Box* o = new Fl_Box(640, 505, 0, 5);
              Fl_Group::current()->resizable(o);
            } // Fl_Box* o
            carrier_group->end();
            Fl_Group::current()->resizable(carrier_group);
          } // Fl_Group* carrier_group
          { Fl_Button* o = new Fl_Button(645, 505, 150, 50, _("Scenery Prefetch"));
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_Scenery);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        page[2]->end();
      } // Fl_Group* page[2]
      { page[3] = new Fl_Group(0, 0, 800, 560);
        { Fl_Group* o = new Fl_Group(0, 525, 800, 25);
          { Fl_Button* o = new Fl_Button(685, 525, 110, 25, _("Advanced..."));
            o->callback((Fl_Callback*)cb_Advanced);
          } // Fl_Button* o
          { Fl_Box* o = new Fl_Box(250, 525, 435, 25);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          { show_cmd_line = new Fl_Check_Button(10, 525, 240, 25, _("Show command line"));
            show_cmd_line->down_box(FL_DOWN_BOX);
            show_cmd_line->callback((Fl_Callback*)cb_show_cmd_line);
          } // Fl_Check_Button* show_cmd_line
          o->end();
        } // Fl_Group* o
        { text = new Fl_Text_Display(5, 370, 790, 145);
          text->box(FL_THIN_DOWN_BOX);
          text->align(Fl_Align(FL_ALIGN_LEFT));
          text->hide();
        } // Fl_Text_Display* text
        { Fl_Group* o = new Fl_Group(5, 5, 790, 110, _("Display"));
          o->box(FL_ENGRAVED_FRAME);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          { resolution = new Fl_Choice(100, 30, 125, 25, _("Resolution :"));
            resolution->tooltip(_("Window geometry, WxH"));
            resolution->down_box(FL_BORDER_BOX);
            resolution->callback((Fl_Callback*)cb_resolution);
            resolution->menu(menu_resolution);
          } // Fl_Choice* resolution
          { game_mode = new Fl_Check_Button(25, 85, 210, 25, _("Full Screen"));
            game_mode->down_box(FL_DOWN_BOX);
            game_mode->callback((Fl_Callback*)cb_game_mode);
          } // Fl_Check_Button* game_mode
          { horizon_effect = new Fl_Check_Button(250, 10, 205, 25, _("Horizon effect"));
            horizon_effect->down_box(FL_DOWN_BOX);
            horizon_effect->callback((Fl_Callback*)cb_horizon_effect);
          } // Fl_Check_Button* horizon_effect
          { enhanced_lighting = new Fl_Check_Button(250, 35, 205, 25, _("Enhanced runway lighting"));
            enhanced_lighting->tooltip(_("Use with caution. It may drop your framerate dramatically"));
            enhanced_lighting->down_box(FL_DOWN_BOX);
            enhanced_lighting->callback((Fl_Callback*)cb_enhanced_lighting);
          } // Fl_Check_Button* enhanced_lighting
          { specular_highlight = new Fl_Check_Button(250, 60, 205, 25, _("Specular highlight"));
            specular_highlight->down_box(FL_DOWN_BOX);
            specular_highlight->callback((Fl_Callback*)cb_specular_highlight);
          } // Fl_Check_Button* specular_highlight
          { frame_rate_limiter = new Fl_Check_Button(250, 85, 205, 25, _("Framerate limiter :"));
            frame_rate_limiter->tooltip(_("Too much framerate hurts the smoothness of the simulation"));
            frame_rate_limiter->down_box(FL_DOWN_BOX);
            frame_rate_limiter->callback((Fl_Callback*)cb_frame_rate_limiter);
          } // Fl_Check_Button* frame_rate_limiter
          { frame_rate_limiter_value = new Fl_Value_Input(455, 85, 55, 25);
            frame_rate_limiter_value->minimum(30);
            frame_rate_limiter_value->maximum(100);
            frame_rate_limiter_value->step(1);
            frame_rate_limiter_value->callback((Fl_Callback*)cb_frame_rate_limiter_value);
          } // Fl_Value_Input* frame_rate_limiter_value
          { Fl_Box* o = new Fl_Box(610, 80, 25, 10);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          { clouds_3d = new Fl_Check_Button(470, 10, 205, 25, _("3D Clouds"));
            clouds_3d->down_box(FL_DOWN_BOX);
            clouds_3d->callback((Fl_Callback*)cb_clouds_3d);
          } // Fl_Check_Button* clouds_3d
          { bpp = new Fl_Choice(100, 55, 125, 25, _("bpp :"));
            bpp->tooltip(_("Color depth (bits per pixel)"));
            bpp->down_box(FL_BORDER_BOX);
            bpp->callback((Fl_Callback*)cb_bpp);
            bpp->menu(menu_bpp);
          } // Fl_Choice* bpp
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 120, 790, 180);
          { Fl_Group* o = new Fl_Group(5, 120, 480, 180, _("Features"));
            o->box(FL_ENGRAVED_FRAME);
            o->labelfont(1);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            { random_objects = new Fl_Check_Button(25, 135, 150, 25, _("Random objects"));
              random_objects->down_box(FL_DOWN_BOX);
              random_objects->callback((Fl_Callback*)cb_random_objects);
            } // Fl_Check_Button* random_objects
            { random_trees = new Fl_Check_Button(25, 160, 150, 25, _("Random trees"));
              random_trees->down_box(FL_DOWN_BOX);
              random_trees->callback((Fl_Callback*)cb_random_trees);
            } // Fl_Check_Button* random_trees
            { ai_models = new Fl_Check_Button(25, 185, 150, 25, _("AI models"));
              ai_models->down_box(FL_DOWN_BOX);
              ai_models->callback((Fl_Callback*)cb_ai_models);
            } // Fl_Check_Button* ai_models
            { time_of_day = new Fl_Check_Button(180, 135, 160, 25, _("Time of day :"));
              time_of_day->down_box(FL_DOWN_BOX);
              time_of_day->callback((Fl_Callback*)cb_time_of_day);
            } // Fl_Check_Button* time_of_day
            { time_of_day_value = new Fl_Choice(345, 135, 120, 25);
              time_of_day_value->down_box(FL_BORDER_BOX);
              time_of_day_value->callback((Fl_Callback*)cb_time_of_day_value);
            } // Fl_Choice* time_of_day_value
            { real_weather_fetch = new Fl_Check_Button(180, 185, 160, 25, _("Real weather fetch"));
              real_weather_fetch->down_box(FL_DOWN_BOX);
              real_weather_fetch->callback((Fl_Callback*)cb_real_weather_fetch);
            } // Fl_Check_Button* real_weather_fetch
            { auto_coordination = new Fl_Check_Button(180, 210, 170, 25, _("Auto-coordination"));
              auto_coordination->down_box(FL_DOWN_BOX);
              auto_coordination->callback((Fl_Callback*)cb_auto_coordination);
            } // Fl_Check_Button* auto_coordination
            { season = new Fl_Choice(345, 160, 120, 25, _("Season :"));
              season->down_box(FL_BORDER_BOX);
              season->callback((Fl_Callback*)cb_season);
            } // Fl_Choice* season
            { Fl_Box* o = new Fl_Box(445, 205, 20, 10);
              Fl_Group::current()->resizable(o);
            } // Fl_Box* o
            { auto_visibility = new Fl_Check_Button(180, 235, 170, 25, _("Menu auto-visibility"));
              auto_visibility->down_box(FL_DOWN_BOX);
              auto_visibility->callback((Fl_Callback*)cb_auto_visibility);
            } // Fl_Check_Button* auto_visibility
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(490, 120, 305, 139, _("Scenarios"));
            o->box(FL_ENGRAVED_FRAME);
            o->labelfont(1);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            { scenarii = new Fl_Browser(495, 136, 295, 88);
              scenarii->type(3);
              scenarii->callback((Fl_Callback*)cb_scenarii);
              scenarii->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              Fl_Group::current()->resizable(scenarii);
            } // Fl_Browser* scenarii
            { Fl_Button* o = new Fl_Button(495, 230, 295, 25, _("Deselect all"));
              o->callback((Fl_Callback*)cb_Deselect);
            } // Fl_Button* o
            o->end();
            Fl_Group::current()->resizable(o);
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(490, 265, 305, 35);
            o->box(FL_ENGRAVED_FRAME);
            o->labelfont(1);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            { terrasync = new Fl_Check_Button(495, 270, 100, 25, _("TerraSync"));
              terrasync->down_box(FL_DOWN_BOX);
              terrasync->labelfont(1);
              terrasync->callback((Fl_Callback*)cb_terrasync);
            } // Fl_Check_Button* terrasync
            { terrasync_port = new Fl_Value_Input(595, 270, 50, 25);
              terrasync_port->callback((Fl_Callback*)cb_terrasync_port);
            } // Fl_Value_Input* terrasync_port
            { Fl_Box* o = new Fl_Box(680, 270, 45, 25);
              Fl_Group::current()->resizable(o);
            } // Fl_Box* o
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 305, 790, 60);
          { atlas_group = new Fl_Group(5, 305, 245, 60);
            atlas_group->box(FL_ENGRAVED_FRAME);
            atlas_group->labeltype(FL_SHADOW_LABEL);
            atlas_group->labelfont(1);
            atlas_group->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            { atlas = new Fl_Check_Button(10, 310, 70, 25, _("Atlas"));
              atlas->down_box(FL_DOWN_BOX);
              atlas->labelfont(1);
              atlas->callback((Fl_Callback*)cb_atlas);
            } // Fl_Check_Button* atlas
            { atlas_host = new Fl_Input(95, 335, 85, 25, _("Hostname :"));
              atlas_host->tooltip(_("Hostname"));
              atlas_host->callback((Fl_Callback*)cb_atlas_host);
              atlas_host->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(atlas_host);
            } // Fl_Input* atlas_host
            { atlas_port = new Fl_Value_Input(190, 335, 50, 25, _(":"));
              atlas_port->callback((Fl_Callback*)cb_atlas_port);
            } // Fl_Value_Input* atlas_port
            atlas_group->end();
          } // Fl_Group* atlas_group
          { multiplay_group = new Fl_Group(255, 305, 540, 60);
            multiplay_group->box(FL_ENGRAVED_FRAME);
            { multiplay = new Fl_Check_Button(260, 310, 130, 25, _("Multiplayer"));
              multiplay->down_box(FL_DOWN_BOX);
              multiplay->labelfont(1);
              multiplay->callback((Fl_Callback*)cb_multiplay);
            } // Fl_Check_Button* multiplay
            { multiplay_callsign = new Fl_Input(545, 310, 170, 25, _("Callsign :"));
              multiplay_callsign->callback((Fl_Callback*)cb_multiplay_callsign);
              multiplay_callsign->when(FL_WHEN_CHANGED);
            } // Fl_Input* multiplay_callsign
            { multiplay_host = new Fl_Input(355, 335, 120, 25, _("Hostname :"));
              multiplay_host->tooltip(_("Peer hostname"));
              multiplay_host->callback((Fl_Callback*)cb_multiplay_host);
              multiplay_host->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(multiplay_host);
            } // Fl_Input* multiplay_host
            { multiplay_in = new Fl_Value_Input(545, 335, 50, 25, _("in :"));
              multiplay_in->tooltip(_("Input port number"));
              multiplay_in->callback((Fl_Callback*)cb_multiplay_in);
            } // Fl_Value_Input* multiplay_in
            { multiplay_out = new Fl_Value_Input(665, 335, 50, 25, _("out :"));
              multiplay_out->tooltip(_("Output port number"));
              multiplay_out->callback((Fl_Callback*)cb_multiplay_out);
            } // Fl_Value_Input* multiplay_out
            multiplay_group->end();
            Fl_Group::current()->resizable(multiplay_group);
          } // Fl_Group* multiplay_group
          o->end();
        } // Fl_Group* o
        { Fl_Box* o = new Fl_Box(245, 370, 280, 145);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        page[3]->end();
      } // Fl_Group* page[3]
      { page[4] = new Fl_Group(0, 0, 800, 560);
        page[4]->hide();
        page[4]->deactivate();
        page[4]->end();
      } // Fl_Group* page[4]
      win->resizable( wiz );
      wiz->end();
    } // Fl_Wizard* wiz
    { Fl_Group* o = new Fl_Group(0, 570, 800, 25);
      { prev = new Fl_Button(575, 570, 70, 25, _("Prev"));
        prev->labelsize(12);
        prev->callback((Fl_Callback*)cb_prev);
      } // Fl_Button* prev
      { next = new Fl_Button(650, 570, 70, 25, _("Next"));
        next->labelsize(12);
        next->callback((Fl_Callback*)cb_next);
      } // Fl_Button* next
      { cancel = new Fl_Button(725, 570, 70, 25, _("Quit"));
        cancel->labelsize(12);
        cancel->callback((Fl_Callback*)cb_cancel);
      } // Fl_Button* cancel
      { Fl_Box* o = new Fl_Box(380, 570, 195, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { defaults = new Fl_Button(5, 570, 125, 25, _("Defaults"));
        defaults->tooltip(_("Clear all selected options and return to the install situation. Useful if FGF\
S don\'t start anymore."));
        defaults->labelsize(12);
        defaults->callback((Fl_Callback*)cb_defaults);
      } // Fl_Button* defaults
      { Fl_Button* o = new Fl_Button(260, 570, 120, 25, _("Save As..."));
        o->tooltip(_("Save current configuration to a file"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 570, 120, 25, _("Load"));
        o->tooltip(_("Load a previously saved configuration"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Load);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    win->end();
  } // Fl_Double_Window* win
}

Fl_Double_Window* Wizard::make_launch_window() {
  { launch_window = new Fl_Double_Window(455, 155, _("FlightGear running..."));
    launch_window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(15, 25, 425, 120);
      { Fl_Box* o = new Fl_Box(15, 25, 425, 25, _("FlightGear has been started"));
        o->labelfont(1);
        o->labelsize(18);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(15, 50, 425, 25, _("Please wait..."));
        o->labelfont(1);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(95, 90, 265, 50, _("To change aircraft, exit FlightGear and return to this launcher"));
        o->labelfont(1);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    launch_window->end();
  } // Fl_Double_Window* launch_window
  return launch_window;
}

Fl_Double_Window* Wizard::make_crash_window() {
  { crash_window = new Fl_Double_Window(455, 240, _("Flightgear crashed..."));
    crash_window->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(5, 15, 445, 25, _("Flightgear encountered an unexpected failure"));
      o->labelfont(1);
      o->labelsize(18);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(5, 40, 445, 25, _("We are sorry for this inconvenience."));
      o->labelfont(1);
    } // Fl_Box* o
    { file_box = new Fl_Box(5, 90, 445, 55);
      file_box->align(Fl_Align(132|FL_ALIGN_INSIDE));
    } // Fl_Box* file_box
    { Fl_Button* o = new Fl_Button(350, 205, 100, 30, _("OK"));
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(5, 65, 445, 25, _("An error report has been generated in the file below :"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(5, 145, 445, 50, _("Please send this error report to the Flightgear development team"));
      o->labelsize(12);
      o->align(Fl_Align(133|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    crash_window->end();
  } // Fl_Double_Window* crash_window
  return crash_window;
}

Fl_Double_Window* Wizard::make_prefetch_window() {
  { prefetch_window = new Fl_Double_Window(350, 130, _("Prefetch Scenery"));
    prefetch_window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 90, 350, 35);
      { Fl_Button* o = new Fl_Button(265, 95, 80, 25, _("Cancel"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(180, 95, 80, 25, _("OK"));
        o->callback((Fl_Callback*)cb_OK1);
      } // Fl_Button* o
      { Fl_Box* o = new Fl_Box(10, 95, 165, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { prefetch_apt = new Fl_Input(180, 40, 60, 25, _("Airport to fetch : "));
    } // Fl_Input* prefetch_apt
    prefetch_window->end();
  } // Fl_Double_Window* prefetch_window
  return prefetch_window;
}
