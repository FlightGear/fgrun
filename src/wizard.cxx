// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "i18n.h"
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "wizard.h"
#include "folder_open.xpm"

void Wizard::cb_fg_exe__i(Fl_Input*, void*) {
  fg_exe_update_cb();
}
void Wizard::cb_fg_exe_(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_fg_exe__i(o,v);
}

void Wizard::cb__i(Fl_Button*, void*) {
  fg_exe_select_cb();
}
void Wizard::cb_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void Wizard::cb_fg_root__i(Fl_Input*, void*) {
  fg_root_update_cb();
}
void Wizard::cb_fg_root_(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_fg_root__i(o,v);
}

void Wizard::cb_1_i(Fl_Button*, void*) {
  fg_root_select_cb();
}
void Wizard::cb_1(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void Wizard::cb_scenery_dir_list__i(Fl_Browser*, void*) {
  scenery_dir_select_cb();
}
void Wizard::cb_scenery_dir_list_(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_scenery_dir_list__i(o,v);
}

void Wizard::cb_scenery_dir_up__i(Fl_Button*, void*) {
  scenery_dir_up_cb();
}
void Wizard::cb_scenery_dir_up_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_up__i(o,v);
}

void Wizard::cb_scenery_dir_down__i(Fl_Button*, void*) {
  scenery_dir_down_cb();
}
void Wizard::cb_scenery_dir_down_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_down__i(o,v);
}

void Wizard::cb_cache_delete__i(Fl_Button*, void*) {
  delete_cache_file_cb();
}
void Wizard::cb_cache_delete_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->user_data()))->cb_cache_delete__i(o,v);
}

void Wizard::cb_Add_i(Fl_Button*, void*) {
  scenery_dir_add_cb();
}
void Wizard::cb_Add(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void Wizard::cb_scenery_dir_delete__i(Fl_Button*, void*) {
  scenery_dir_delete_cb();
}
void Wizard::cb_scenery_dir_delete_(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scenery_dir_delete__i(o,v);
}

void Wizard::cb_aircraft_i(Fl_Browser*, void*) {
  preview_aircraft();
}
void Wizard::cb_aircraft(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_aircraft_i(o,v);
}

void Wizard::cb_Advanced_i(Fl_Button*, void*) {
  advanced_cb();
}
void Wizard::cb_Advanced(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Advanced_i(o,v);
}

void Wizard::cb_show_cmd_line_i(Fl_Check_Button*, void*) {
  show_cmd_line_cb();
}
void Wizard::cb_show_cmd_line(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_show_cmd_line_i(o,v);
}

void Wizard::cb_resolution_i(Fl_Choice*, void*) {
  resolution_cb();
}
void Wizard::cb_resolution(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_resolution_i(o,v);
}

Fl_Menu_Item Wizard::menu_resolution[] = {
 {_("640x480"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("800x600"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1024x768"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1280x1024"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1600x1200"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Wizard::cb_game_mode_i(Fl_Check_Button*, void*) {
  game_mode_cb();
}
void Wizard::cb_game_mode(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_game_mode_i(o,v);
}

void Wizard::cb_horizon_effect_i(Fl_Check_Button*, void*) {
  horizon_effect_cb();
}
void Wizard::cb_horizon_effect(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_horizon_effect_i(o,v);
}

void Wizard::cb_enhanced_lighting_i(Fl_Check_Button*, void*) {
  enhanced_lighting_cb();
}
void Wizard::cb_enhanced_lighting(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_enhanced_lighting_i(o,v);
}

void Wizard::cb_specular_highlight_i(Fl_Check_Button*, void*) {
  specular_highlight_cb();
}
void Wizard::cb_specular_highlight(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_specular_highlight_i(o,v);
}

void Wizard::cb_frame_rate_limiter_i(Fl_Check_Button*, void*) {
  frame_rate_limiter_cb();
}
void Wizard::cb_frame_rate_limiter(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_frame_rate_limiter_i(o,v);
}

void Wizard::cb_frame_rate_limiter_value_i(Fl_Value_Input*, void*) {
  frame_rate_limiter_value_cb();
}
void Wizard::cb_frame_rate_limiter_value(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_frame_rate_limiter_value_i(o,v);
}

void Wizard::cb_clouds_3d_i(Fl_Check_Button*, void*) {
  clouds_3d_cb();
}
void Wizard::cb_clouds_3d(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clouds_3d_i(o,v);
}

void Wizard::cb_bpp_i(Fl_Choice*, void*) {
  bpp_cb();
}
void Wizard::cb_bpp(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bpp_i(o,v);
}

Fl_Menu_Item Wizard::menu_bpp[] = {
 {_("32"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("24"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("16"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Wizard::cb_random_objects_i(Fl_Check_Button*, void*) {
  random_objects_cb();
}
void Wizard::cb_random_objects(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_random_objects_i(o,v);
}

void Wizard::cb_random_trees_i(Fl_Check_Button*, void*) {
  random_trees_cb();
}
void Wizard::cb_random_trees(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_random_trees_i(o,v);
}

void Wizard::cb_ai_models_i(Fl_Check_Button*, void*) {
  ai_models_cb();
}
void Wizard::cb_ai_models(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ai_models_i(o,v);
}

void Wizard::cb_time_of_day_i(Fl_Check_Button*, void*) {
  time_of_day_cb();
}
void Wizard::cb_time_of_day(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_time_of_day_i(o,v);
}

void Wizard::cb_time_of_day_value_i(Fl_Choice*, void*) {
  time_of_day_value_cb();
}
void Wizard::cb_time_of_day_value(Fl_Choice* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_time_of_day_value_i(o,v);
}

void Wizard::cb_real_weather_fetch_i(Fl_Check_Button*, void*) {
  real_weather_fetch_cb();
}
void Wizard::cb_real_weather_fetch(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_real_weather_fetch_i(o,v);
}

void Wizard::cb_auto_coordination_i(Fl_Check_Button*, void*) {
  auto_coordination_cb();
}
void Wizard::cb_auto_coordination(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_auto_coordination_i(o,v);
}

void Wizard::cb_scenarii_i(Fl_Browser*, void*) {
  scenarii_cb();
}
void Wizard::cb_scenarii(Fl_Browser* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_scenarii_i(o,v);
}

void Wizard::cb_atlas_i(Fl_Check_Button*, void*) {
  atlas_cb();
}
void Wizard::cb_atlas(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_atlas_i(o,v);
}

void Wizard::cb_atlas_host_i(Fl_Input*, void*) {
  atlas_host_cb();
}
void Wizard::cb_atlas_host(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_atlas_host_i(o,v);
}

void Wizard::cb_atlas_port_i(Fl_Value_Input*, void*) {
  atlas_port_cb();
}
void Wizard::cb_atlas_port(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_atlas_port_i(o,v);
}

void Wizard::cb_multiplay_i(Fl_Check_Button*, void*) {
  multiplay_cb();
}
void Wizard::cb_multiplay(Fl_Check_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_i(o,v);
}

void Wizard::cb_multiplay_callsign_i(Fl_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_callsign(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_callsign_i(o,v);
}

void Wizard::cb_multiplay_host_i(Fl_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_host(Fl_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_host_i(o,v);
}

void Wizard::cb_multiplay_in_i(Fl_Value_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_in(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_in_i(o,v);
}

void Wizard::cb_multiplay_out_i(Fl_Value_Input*, void*) {
  multiplay_field_cb();
}
void Wizard::cb_multiplay_out(Fl_Value_Input* o, void* v) {
  ((Wizard*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_multiplay_out_i(o,v);
}

void Wizard::cb_prev_i(Fl_Button*, void*) {
  prev_cb();
}
void Wizard::cb_prev(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_prev_i(o,v);
}

void Wizard::cb_next_i(Fl_Button*, void*) {
  next_cb();
}
void Wizard::cb_next(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_next_i(o,v);
}

void Wizard::cb_cancel_i(Fl_Button*, void*) {
  cancel_cb();
}
void Wizard::cb_cancel(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_cancel_i(o,v);
}

void Wizard::cb_defaults_i(Fl_Button*, void*) {
  defaults_cb();
}
void Wizard::cb_defaults(Fl_Button* o, void* v) {
  ((Wizard*)(o->parent()->parent()->user_data()))->cb_defaults_i(o,v);
}

Wizard::Wizard() : prefs( Fl_Preferences::USER, "flightgear.org", "fgrun" ), logwin(0), folder_open_pixmap(folder_open_xpm), adv(0) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = win = new Fl_Double_Window(800, 600, _("FlightGear Wizard"));
    w = o;
    o->user_data((void*)(this));
    { Fl_Wizard* o = wiz = new Fl_Wizard(0, 0, 800, 560);
      { Fl_Group* o = page[0] = new Fl_Group(0, 0, 800, 560, _("Select Paths"));
        o->labelfont(1);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        o->hide();
        { Fl_Help_View* o = about_ = new Fl_Help_View(5, 25, 790, 130);
          o->labeltype(FL_NO_LABEL);
        }
        { Fl_Input* o = fg_exe_ = new Fl_Input(130, 175, 495, 25, _("Executable:"));
          o->tooltip(_("Full pathname to FlightGear executable"));
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_fg_exe_);
          o->when(FL_WHEN_ENTER_KEY);
        }
        { Fl_Button* o = new Fl_Button(630, 175, 25, 25);
          o->tooltip(_("Full pathname to FlightGear executable"));
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_);
          o->image(folder_open_pixmap);
        }
        { Fl_Input* o = fg_root_ = new Fl_Input(130, 205, 495, 25, _("FG_ROOT:"));
          o->tooltip(_("root data path"));
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_fg_root_);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Button* o = new Fl_Button(630, 205, 25, 25);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_1);
          o->image(folder_open_pixmap);
        }
        { Fl_Browser* o = scenery_dir_list_ = new Fl_Browser(130, 275, 495, 185, _("FG_SCENERY:"));
          o->tooltip(_("Scenery directories"));
          o->type(2);
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_scenery_dir_list_);
          o->align(FL_ALIGN_LEFT);
          Fl_Group::current()->resizable(o);
        }
        { Fl_Group* o = new Fl_Group(630, 275, 25, 90);
          { Fl_Button* o = scenery_dir_up_ = new Fl_Button(630, 340, 25, 25, _("@8>"));
            o->callback((Fl_Callback*)cb_scenery_dir_up_);
            o->deactivate();
          }
          { Fl_Box* o = new Fl_Box(630, 275, 25, 65);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(630, 365, 25, 95);
          { Fl_Button* o = scenery_dir_down_ = new Fl_Button(630, 370, 25, 25, _("@2>"));
            o->callback((Fl_Callback*)cb_scenery_dir_down_);
            o->deactivate();
          }
          { Fl_Box* o = new Fl_Box(630, 395, 25, 65);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Button* o = cache_delete_ = new Fl_Button(630, 490, 60, 25, _("Delete"));
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_cache_delete_);
          o->deactivate();
        }
        { Fl_Output* o = cache_file_ = new Fl_Output(130, 490, 495, 25, _("Airports Cache:"));
          o->labelsize(12);
          o->textsize(12);
        }
        { Fl_Group* o = new Fl_Group(130, 245, 495, 25);
          { Fl_Button* o = new Fl_Button(130, 245, 60, 25, _("Add..."));
            o->tooltip(_("Add a scenery directory"));
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_Add);
          }
          { Fl_Button* o = scenery_dir_delete_ = new Fl_Button(195, 245, 60, 25, _("Delete"));
            o->tooltip(_("Delete a scenery directory"));
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_scenery_dir_delete_);
            o->deactivate();
          }
          { Fl_Box* o = new Fl_Box(260, 245, 365, 25);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = page[1] = new Fl_Group(0, 0, 800, 560, _("Select an aircraft"));
        o->labelfont(1);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        o->hide();
        { Fl_Tile* o = new Fl_Tile(0, 20, 795, 500);
          { Fl_Browser* o = aircraft = new Fl_Browser(5, 20, 200, 500);
            o->type(2);
            o->labelsize(12);
            o->textsize(12);
            o->callback((Fl_Callback*)cb_aircraft);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_OSG* o = preview = new Fl_OSG(205, 20, 590, 500, _("Preview"));
            o->box(FL_THIN_DOWN_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(12);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Box* o = new Fl_Box(80, 190, 265, 65);
            o->hide();
            Fl_Group::current()->resizable(o);
          }
          o->end();
          Fl_Group::current()->resizable(o);
        }
        { Fl_Group* o = new Fl_Group(5, 520, 790, 35);
          o->box(FL_DOWN_BOX);
          aircraft_status = new Fl_Output(115, 525, 135, 25, _("Status :"));
          { Fl_Output* o = aircraft_author = new Fl_Output(385, 525, 405, 25, _("Author(s) :"));
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = page[2] = new Fl_Group(0, 0, 800, 560, _("Select a location"));
        o->labelfont(1);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        o->hide();
        { AirportBrowser* o = airports_ = new AirportBrowser(5, 25, 790, 480);
          o->box(FL_NO_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->align(FL_ALIGN_CENTER);
          o->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(o);
        }
        { Fl_Group* o = new Fl_Group(5, 510, 790, 45, _("Carrier Ops"));
          o->box(FL_ENGRAVED_FRAME);
          o->labelfont(1);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          carrier_ = new Fl_Input(200, 525, 100, 25, _("Carrier : "));
          parkpos_ = new Fl_Input(440, 525, 100, 25, _("Park pos :"));
          { Fl_Box* o = new Fl_Box(660, 510, 135, 10);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = page[3] = new Fl_Group(0, 0, 800, 560);
        { Fl_Group* o = new Fl_Group(0, 525, 800, 25);
          { Fl_Button* o = new Fl_Button(685, 525, 110, 25, _("Advanced..."));
            o->callback((Fl_Callback*)cb_Advanced);
          }
          { Fl_Box* o = new Fl_Box(250, 525, 435, 25);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Check_Button* o = show_cmd_line = new Fl_Check_Button(10, 525, 240, 25, _("Show command line"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_show_cmd_line);
          }
          o->end();
        }
        { Fl_Text_Display* o = text = new Fl_Text_Display(5, 370, 790, 145);
          o->box(FL_THIN_DOWN_BOX);
          o->align(FL_ALIGN_LEFT);
          o->hide();
        }
        { Fl_Group* o = new Fl_Group(5, 5, 790, 110, _("Display"));
          o->box(FL_ENGRAVED_FRAME);
          o->labelfont(1);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Choice* o = resolution = new Fl_Choice(100, 30, 125, 25, _("Resolution :"));
            o->tooltip(_("Window geometry, WxH"));
            o->down_box(FL_BORDER_BOX);
            o->callback((Fl_Callback*)cb_resolution);
            o->menu(menu_resolution);
          }
          { Fl_Check_Button* o = game_mode = new Fl_Check_Button(25, 85, 210, 25, _("Game mode ( Fullscreen )"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_game_mode);
          }
          { Fl_Check_Button* o = horizon_effect = new Fl_Check_Button(250, 10, 205, 25, _("Horizon effect"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_horizon_effect);
          }
          { Fl_Check_Button* o = enhanced_lighting = new Fl_Check_Button(250, 35, 205, 25, _("Enhanced runway lighting"));
            o->tooltip(_("Use with caution. It may drop your framerate dramatically"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_enhanced_lighting);
          }
          { Fl_Check_Button* o = specular_highlight = new Fl_Check_Button(250, 60, 205, 25, _("Specular highlight"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_specular_highlight);
          }
          { Fl_Check_Button* o = frame_rate_limiter = new Fl_Check_Button(250, 85, 205, 25, _("Framerate limiter :"));
            o->tooltip(_("Too much framerate hurts the smoothness of the simulation"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_frame_rate_limiter);
          }
          { Fl_Value_Input* o = frame_rate_limiter_value = new Fl_Value_Input(455, 85, 55, 25);
            o->minimum(30);
            o->maximum(100);
            o->step(1);
            o->callback((Fl_Callback*)cb_frame_rate_limiter_value);
          }
          { Fl_Box* o = new Fl_Box(610, 80, 25, 10);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Check_Button* o = clouds_3d = new Fl_Check_Button(470, 10, 205, 25, _("3D clouds (experimental)"));
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_clouds_3d);
          }
          { Fl_Choice* o = bpp = new Fl_Choice(100, 55, 125, 25, _("bpp :"));
            o->tooltip(_("Color depth (bits per pixel)"));
            o->down_box(FL_BORDER_BOX);
            o->callback((Fl_Callback*)cb_bpp);
            o->menu(menu_bpp);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(5, 120, 790, 180);
          { Fl_Group* o = new Fl_Group(5, 120, 480, 180, _("Features"));
            o->box(FL_ENGRAVED_FRAME);
            o->labelfont(1);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            { Fl_Check_Button* o = random_objects = new Fl_Check_Button(25, 135, 150, 25, _("Random objects"));
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_random_objects);
            }
            { Fl_Check_Button* o = random_trees = new Fl_Check_Button(25, 160, 150, 25, _("Random trees"));
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_random_trees);
            }
            { Fl_Check_Button* o = ai_models = new Fl_Check_Button(25, 185, 150, 25, _("AI models"));
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_ai_models);
            }
            { Fl_Check_Button* o = time_of_day = new Fl_Check_Button(180, 135, 160, 25, _("Time of day :"));
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_time_of_day);
            }
            { Fl_Choice* o = time_of_day_value = new Fl_Choice(345, 135, 120, 25);
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_time_of_day_value);
            }
            { Fl_Check_Button* o = real_weather_fetch = new Fl_Check_Button(180, 160, 160, 25, _("Real weather fetch"));
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_real_weather_fetch);
            }
            { Fl_Check_Button* o = auto_coordination = new Fl_Check_Button(180, 185, 170, 25, _("Auto-coordination"));
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_auto_coordination);
            }
            { Fl_Box* o = new Fl_Box(445, 180, 20, 10);
              Fl_Group::current()->resizable(o);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(490, 120, 305, 180, _("Scenarios"));
            o->box(FL_ENGRAVED_FRAME);
            o->labelfont(1);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            { Fl_Browser* o = scenarii = new Fl_Browser(495, 136, 295, 158);
              o->type(3);
              o->callback((Fl_Callback*)cb_scenarii);
              o->align(FL_ALIGN_TOP_LEFT);
              Fl_Group::current()->resizable(o);
            }
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(5, 305, 790, 60);
          { Fl_Group* o = atlas_group = new Fl_Group(5, 305, 245, 60);
            o->box(FL_ENGRAVED_FRAME);
            o->labeltype(FL_SHADOW_LABEL);
            o->labelfont(1);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            { Fl_Check_Button* o = atlas = new Fl_Check_Button(10, 310, 70, 25, _("Atlas"));
              o->down_box(FL_DOWN_BOX);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_atlas);
            }
            { Fl_Input* o = atlas_host = new Fl_Input(95, 335, 85, 25, _("Hostname :"));
              o->tooltip(_("Hostname"));
              o->callback((Fl_Callback*)cb_atlas_host);
              o->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Value_Input* o = atlas_port = new Fl_Value_Input(190, 335, 50, 25, _(":"));
              o->callback((Fl_Callback*)cb_atlas_port);
            }
            o->end();
          }
          { Fl_Group* o = multiplay_group = new Fl_Group(255, 305, 540, 60);
            o->box(FL_ENGRAVED_FRAME);
            { Fl_Check_Button* o = multiplay = new Fl_Check_Button(260, 310, 130, 25, _("Multiplayer"));
              o->down_box(FL_DOWN_BOX);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_multiplay);
            }
            { Fl_Input* o = multiplay_callsign = new Fl_Input(545, 310, 170, 25, _("Callsign :"));
              o->callback((Fl_Callback*)cb_multiplay_callsign);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Input* o = multiplay_host = new Fl_Input(355, 335, 120, 25, _("Hostname :"));
              o->tooltip(_("Peer hostname"));
              o->callback((Fl_Callback*)cb_multiplay_host);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Value_Input* o = multiplay_in = new Fl_Value_Input(545, 335, 50, 25, _("in :"));
              o->tooltip(_("Input port number"));
              o->callback((Fl_Callback*)cb_multiplay_in);
            }
            { Fl_Value_Input* o = multiplay_out = new Fl_Value_Input(665, 335, 50, 25, _("out :"));
              o->tooltip(_("Output port number"));
              o->callback((Fl_Callback*)cb_multiplay_out);
            }
            { Fl_Box* o = new Fl_Box(625, 305, 10, 0);
              Fl_Group::current()->resizable(o);
            }
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(245, 370, 280, 145);
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      { Fl_Group* o = page[4] = new Fl_Group(0, 0, 800, 560);
        o->hide();
        o->deactivate();
        o->end();
      }
      win->resizable( wiz );
      o->end();
    }
    { Fl_Group* o = new Fl_Group(0, 570, 800, 25);
      { Fl_Button* o = prev = new Fl_Button(575, 570, 70, 25, _("Prev"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_prev);
      }
      { Fl_Button* o = next = new Fl_Button(650, 570, 70, 25, _("Next"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_next);
      }
      { Fl_Button* o = cancel = new Fl_Button(725, 570, 70, 25, _("Quit"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_cancel);
      }
      { Fl_Box* o = new Fl_Box(140, 570, 435, 25);
        Fl_Group::current()->resizable(o);
      }
      { Fl_Button* o = defaults = new Fl_Button(5, 570, 135, 25, _("Defaults"));
        o->callback((Fl_Callback*)cb_defaults);
      }
      o->end();
    }
    o->end();
  }
}

Fl_Double_Window* Wizard::make_launch_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = launch_window = new Fl_Double_Window(455, 155, _("FlightGear running..."));
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(15, 25, 425, 120);
      { Fl_Box* o = new Fl_Box(15, 25, 425, 25, _("FlightGear has been started"));
        o->labelfont(1);
        o->labelsize(18);
        o->align(FL_ALIGN_WRAP);
      }
      { Fl_Box* o = new Fl_Box(15, 50, 425, 25, _("Please wait..."));
        o->labelfont(1);
      }
      { Fl_Box* o = new Fl_Box(95, 90, 265, 50, _("To change aircraft, exit FlightGear and return to this launcher"));
        o->labelfont(1);
        o->align(FL_ALIGN_WRAP);
      }
      o->end();
    }
    o->end();
  }
  return w;
}
