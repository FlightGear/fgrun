// generated by Fast Light User Interface Designer (fluid) version 1.0100

#include "ui.h"

inline void UserInterface::cb_quit_i(Fl_Button*, void*) {
  main_window->hide();
}
void UserInterface::cb_quit(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_quit_i(o,v);
}

inline void UserInterface::cb_save_i(Fl_Button*, void*) {
  save_settings();
}
void UserInterface::cb_save(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_save_i(o,v);
}

inline void UserInterface::cb_run_i(Fl_Button*, void*) {
  run_fgfs();
}
void UserInterface::cb_run(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_run_i(o,v);
}

inline void UserInterface::cb__i(Fl_Button*, void*) {
  select_fg_exe();
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb__i(o,v);
}

inline void UserInterface::cb_1_i(Fl_Button*, void*) {
  select_fg_root();
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_1_i(o,v);
}

inline void UserInterface::cb_2_i(Fl_Button*, void*) {
  select_fg_scenery();
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_2_i(o,v);
}

Fl_Menu_Item UserInterface::menu_control[] = {
 {"joystick", 0,  0, 0, 0, 0, 0, 14, 56},
 {"keyboard", 0,  0, 0, 0, 0, 0, 14, 56},
 {"mouse", 0,  0, 0, 0, 0, 0, 14, 56},
 {0}
};

inline void UserInterface::cb_3_i(Fl_Button*, void*) {
  select_browser();
}
void UserInterface::cb_3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

inline void UserInterface::cb_enable_hud_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  enable_antialias_hud->activate();
} else {
  enable_antialias_hud->deactivate();
};
}
void UserInterface::cb_enable_hud(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_enable_hud_i(o,v);
}

inline void UserInterface::cb_fdm_i(Fl_Choice* o, void*) {
  if (strcmp(o->text(), "jsb") == 0) {
  notrim->activate();
} else {
  notrim->deactivate();
};
}
void UserInterface::cb_fdm(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_fdm_i(o,v);
}

Fl_Menu_Item UserInterface::menu_fdm[] = {
 {"ada", 0,  0, 0, 0, 0, 0, 14, 56},
 {"balloon", 0,  0, 0, 0, 0, 0, 14, 56},
 {"external", 0,  0, 0, 0, 0, 0, 14, 56},
 {"jsb", 0,  0, 0, 0, 0, 0, 14, 56},
 {"larcsim", 0,  0, 0, 0, 0, 0, 14, 56},
 {"magic", 0,  0, 0, 0, 0, 0, 14, 56},
 {"network", 0,  0, 0, 0, 0, 0, 14, 56},
 {"null", 0,  0, 0, 0, 0, 0, 14, 56},
 {"ufo", 0,  0, 0, 0, 0, 0, 14, 56},
 {"yasim", 0,  0, 0, 0, 0, 0, 14, 56},
 {0}
};

inline void UserInterface::cb_time_offset_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_text->activate();
  time_offset_text->take_focus();
  start_date_sys_text->deactivate();
  start_date_lat_text->deactivate();
  start_date_gmt_text->deactivate();
};
}
void UserInterface::cb_time_offset(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_time_offset_i(o,v);
}

inline void UserInterface::cb_time_match_real_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_text->deactivate();
  start_date_sys_text->deactivate();
  start_date_lat_text->deactivate();
  start_date_gmt_text->deactivate();
};
}
void UserInterface::cb_time_match_real(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_time_match_real_i(o,v);
}

inline void UserInterface::cb_time_match_local_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_text->deactivate();
  start_date_sys_text->deactivate();
  start_date_lat_text->deactivate();
  start_date_gmt_text->deactivate();
};
}
void UserInterface::cb_time_match_local(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_time_match_local_i(o,v);
}

inline void UserInterface::cb_start_date_sys_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  start_date_sys_text->activate();
  start_date_sys_text->take_focus();
  time_offset_text->deactivate();
  start_date_lat_text->deactivate();
  start_date_gmt_text->deactivate();
};
}
void UserInterface::cb_start_date_sys(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_start_date_sys_i(o,v);
}

inline void UserInterface::cb_start_date_lat_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  start_date_lat_text->activate();
  start_date_lat_text->take_focus();
  time_offset_text->deactivate();
  start_date_sys_text->deactivate();
  start_date_gmt_text->deactivate();
};
}
void UserInterface::cb_start_date_lat(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_start_date_lat_i(o,v);
}

inline void UserInterface::cb_start_date_gmt_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  start_date_gmt_text->activate();
  start_date_gmt_text->take_focus();
  time_offset_text->deactivate();
  start_date_lat_text->deactivate();
  start_date_sys_text->deactivate();
};
}
void UserInterface::cb_start_date_gmt(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_start_date_gmt_i(o,v);
}

inline void UserInterface::cb_io_options_list_i(Fl_Browser* o, void*) {
  if (o->value()) {
  io_edit->activate();
  io_delete->activate();
} else {
  io_edit->deactivate();
  io_delete->deactivate();
};
}
void UserInterface::cb_io_options_list(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_io_options_list_i(o,v);
}

inline void UserInterface::cb_Add_i(Fl_Button*, void*) {
  add_io_item();
}
void UserInterface::cb_Add(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

inline void UserInterface::cb_io_edit_i(Fl_Button*, void*) {
  edit_io_item();
}
void UserInterface::cb_io_edit(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_io_edit_i(o,v);
}

inline void UserInterface::cb_io_delete_i(Fl_Button*, void*) {
  delete_io_item();
}
void UserInterface::cb_io_delete(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_io_delete_i(o,v);
}

inline void UserInterface::cb_httpd_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  httpd_port->activate();
  httpd_port->take_focus();
} else {
  httpd_port->deactivate();
};
}
void UserInterface::cb_httpd(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_httpd_i(o,v);
}

inline void UserInterface::cb_props_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  props_port->activate();
  props_port->take_focus();
} else {
  props_port->deactivate();
};
}
void UserInterface::cb_props(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_props_i(o,v);
}

inline void UserInterface::cb_jpg_httpd_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  jpg_httpd_port->activate();
  jpg_httpd_port->take_focus();
} else {
  jpg_httpd_port->deactivate();
};
}
void UserInterface::cb_jpg_httpd(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_jpg_httpd_i(o,v);
}

inline void UserInterface::cb_Reset_i(Fl_Button*, void*) {
  reset();
}
void UserInterface::cb_Reset(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

inline void UserInterface::cb_Update_i(Fl_Button*, void*) {
  update_airports();
}
void UserInterface::cb_Update(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Update_i(o,v);
}

inline void UserInterface::cb_Update1_i(Fl_Button*, void*) {
  update_aircraft();
}
void UserInterface::cb_Update1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Update1_i(o,v);
}

Fl_Menu_Item UserInterface::menu_io_protocol[] = {
 {"garmin", 0,  0, 0, 0, 0, 0, 14, 56},
 {"joyclient", 0,  0, 0, 0, 0, 0, 14, 56},
 {"native-ctrls", 0,  0, 0, 0, 0, 0, 14, 56},
 {"native-fdm", 0,  0, 0, 0, 0, 0, 14, 56},
 {"nmea", 0,  0, 0, 0, 0, 0, 14, 56},
 {"opengc", 0,  0, 0, 0, 0, 0, 14, 56},
 {"pve", 0,  0, 0, 0, 0, 0, 14, 56},
 {"props", 0,  0, 0, 0, 0, 0, 14, 56},
 {"ray", 0,  0, 0, 0, 0, 0, 14, 56},
 {"rul", 0,  0, 0, 0, 0, 0, 14, 56},
 {0}
};

inline void UserInterface::cb_io_medium_i(Fl_Choice* o, void* v) {
  io_medium_cb(o,v);
}
void UserInterface::cb_io_medium(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_io_medium_i(o,v);
}

Fl_Menu_Item UserInterface::menu_io_medium[] = {
 {"file", 0,  0, 0, 0, 0, 0, 14, 56},
 {"serial", 0,  0, 0, 0, 0, 0, 14, 56},
 {"socket", 0,  0, 0, 0, 0, 0, 14, 56},
 {0}
};

inline void UserInterface::cb_Cancel_i(Fl_Button*, void*) {
  addOptionDlg->hide();
}
void UserInterface::cb_Cancel(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

inline void UserInterface::cb_io_option_ok_i(Fl_Button*, void*) {
  OptionDlg_ok_cb();
}
void UserInterface::cb_io_option_ok(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_io_option_ok_i(o,v);
}

Fl_Menu_Item UserInterface::menu_io_dir[] = {
 {"in", 0,  0, 0, 0, 0, 0, 14, 56},
 {"out", 0,  0, 0, 0, 0, 0, 14, 56},
 {"bi", 0,  0, 0, 0, 0, 0, 14, 56},
 {0}
};

inline void UserInterface::cb_Cancel1_i(Fl_Button*, void*) {
  propertyDlg_cancel();
}
void UserInterface::cb_Cancel1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

inline void UserInterface::cb_OK_i(Fl_Button*, void*) {
  propertyDlg_ok();
}
void UserInterface::cb_OK(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

inline void UserInterface::cb_Close_i(Fl_Menu_*, void*) {
  output_window->hide();
}
void UserInterface::cb_Close(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

Fl_Menu_Item UserInterface::menu_[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Save", 0x40073,  0, 0, 0, 0, 0, 14, 56},
 {"Save &as...", 0x50073,  0, 0, 128, 0, 0, 14, 56},
 {"&Close", 0x40077,  (Fl_Callback*)UserInterface::cb_Close, 0, 0, 0, 0, 14, 56},
 {0},
 {0}
};

UserInterface::UserInterface() {
  Fl_Window* w;
  { Fl_Window* o = main_window = new Fl_Window(640, 480, "FlightGear Launcher");
    w = o;
    o->user_data((void*)(this));
    { Fl_Button* o = quit = new Fl_Button(580, 450, 55, 25, "Quit");
      o->callback((Fl_Callback*)cb_quit);
    }
    { Fl_Button* o = save = new Fl_Button(520, 450, 55, 25, "Save");
      o->callback((Fl_Callback*)cb_save);
    }
    { Fl_Button* o = run = new Fl_Button(460, 450, 55, 25, "Run");
      o->callback((Fl_Callback*)cb_run);
    }
    fg_exe = new Fl_Input(105, 30, 500, 25, "Executable:");
    { Fl_Button* o = new Fl_Button(610, 30, 25, 25, "...");
      o->callback((Fl_Callback*)cb_);
    }
    fg_root = new Fl_Input(105, 60, 500, 25, "FG_ROOT:");
    fg_scenery = new Fl_Input(105, 90, 500, 25, "FG_SCENERY:");
    { Fl_Button* o = new Fl_Button(610, 60, 25, 25, "...");
      o->callback((Fl_Callback*)cb_1);
    }
    { Fl_Button* o = new Fl_Button(610, 90, 25, 25, "...");
      o->callback((Fl_Callback*)cb_2);
    }
    { Fl_Choice* o = airport = new Fl_Choice(105, 120, 240, 25, "Airport");
      o->down_box(FL_BORDER_BOX);
    }
    { Fl_Choice* o = aircraft = new Fl_Choice(105, 150, 240, 25, "Aircraft:");
      o->down_box(FL_BORDER_BOX);
    }
    { Fl_Tabs* o = tabs = new Fl_Tabs(0, 190, 640, 255);
      o->labeltype(FL_NO_LABEL);
      { Fl_Group* o = general_tab = new Fl_Group(0, 215, 640, 230, "General");
        { Fl_Check_Button* o = enable_game_mode = new Fl_Check_Button(30, 225, 140, 25, "Game Mode");
          o->tooltip("Enable full screen game mode");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = enable_splash_screen = new Fl_Check_Button(30, 255, 140, 25, "Splash Screen");
          o->tooltip("Enable splash screen");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_intro_music = new Fl_Check_Button(30, 285, 140, 25, "Intro Music");
          o->tooltip("Enable introduction music");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_mouse_pointer = new Fl_Check_Button(30, 315, 140, 25, "Mouse Pointer");
          o->tooltip("Enable extra mouse pointer");
          o->down_box(FL_DOWN_BOX);
          o->deactivate();
        }
        { Fl_Check_Button* o = enable_random_objects = new Fl_Check_Button(30, 345, 140, 25, "Random Objects");
          o->tooltip("Enable random scenery objects");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = freeze = new Fl_Check_Button(200, 225, 140, 25, "Freeze");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = fuel_freeze = new Fl_Check_Button(200, 255, 140, 25, "Fuel Freeze");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = clock_freeze = new Fl_Check_Button(200, 285, 140, 25, "Clock Freeze");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Choice* o = control = new Fl_Choice(370, 390, 140, 25, "Control:");
          o->tooltip("Primary control device");
          o->down_box(FL_BORDER_BOX);
          o->menu(menu_control);
        }
        { Fl_Check_Button* o = auto_coordination = new Fl_Check_Button(200, 315, 140, 25, "Auto-coordination");
          o->tooltip("Enable auto-coordination");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Input* o = browser = new Fl_Input(125, 390, 140, 25, "Browser:");
          o->tooltip("Path to your web browser");
        }
        { Fl_Button* o = new Fl_Button(270, 390, 25, 25, "...");
          o->callback((Fl_Callback*)cb_3);
        }
        { Fl_Group* o = new Fl_Group(370, 225, 140, 55);
          { Fl_Round_Button* o = units_feet = new Fl_Round_Button(370, 225, 140, 25, "feet");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->value(1);
          }
          { Fl_Round_Button* o = units_meters = new Fl_Round_Button(370, 255, 140, 25, "meters");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "Features");
        o->hide();
        { Fl_Check_Button* o = enable_hud = new Fl_Check_Button(30, 225, 140, 25, "HUD");
          o->tooltip("Enable Heads Up Display (HUD)");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_enable_hud);
        }
        { Fl_Check_Button* o = enable_panel = new Fl_Check_Button(30, 285, 140, 25, "Panel");
          o->tooltip("Enable instrument panel");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_sound = new Fl_Check_Button(30, 315, 140, 25, "Sound");
          o->tooltip("Enable sound effects");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_antialias_hud = new Fl_Check_Button(45, 255, 140, 25, "Anti-alias HUD");
          o->tooltip("Enable anti-aliased HUD");
          o->down_box(FL_DOWN_BOX);
          o->deactivate();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "Rendering");
        o->tooltip("Enable 2D (flat) clouds");
        o->hide();
        { Fl_Group* o = new Fl_Group(170, 250, 140, 90, "Fog");
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Round_Button* o = fog_disabled = new Fl_Round_Button(170, 255, 120, 25, "Disabled");
            o->tooltip("Disable fog");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
          }
          { Fl_Round_Button* o = fog_fastest = new Fl_Round_Button(170, 285, 120, 25, "Fast");
            o->tooltip("Enable fastest fog/haze");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
          }
          { Fl_Round_Button* o = fog_nicest = new Fl_Round_Button(170, 315, 120, 25, "Nice");
            o->tooltip("Enable nicest fog/haze");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->value(1);
          }
          o->end();
        }
        { Fl_Check_Button* o = enable_clouds = new Fl_Check_Button(30, 225, 140, 25, "Clouds");
          o->tooltip("Enable 2D (flat) clouds");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_clouds3d = new Fl_Check_Button(30, 255, 140, 25, "Clouds 3D");
          o->tooltip("Enable 3D (volumetric) clouds");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = enable_fullscreen = new Fl_Check_Button(30, 375, 140, 25, "Full Screen");
          o->tooltip("Enable fullscreen mode");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = enable_skyblend = new Fl_Check_Button(30, 285, 140, 25, "Sky Blend");
          o->tooltip("Enable sky blending");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_textures = new Fl_Check_Button(30, 315, 140, 25, "Textures");
          o->tooltip("Enable textures");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
        }
        { Fl_Check_Button* o = enable_wireframe = new Fl_Check_Button(30, 345, 140, 25, "Wireframe");
          o->tooltip("Enable wireframe drawing mode");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Value_Input* o = fov = new Fl_Value_Input(205, 345, 45, 25, "FOV:");
          o->tooltip("Field of view (0.1 to 179.9 degrees)");
          o->minimum(0.1);
          o->maximum(179.9);
          o->step(0.1);
          o->value(60);
        }
        { Fl_Check_Button* o = shading_flat = new Fl_Check_Button(170, 375, 140, 25, "Flat Shading");
          o->tooltip("Enable flat shading");
          o->down_box(FL_DOWN_BOX);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "Flight Model");
        o->hide();
        { Fl_Choice* o = fdm = new Fl_Choice(80, 230, 100, 25, "FDM:");
          o->tooltip("Core Flight Dynamics Model");
          o->down_box(FL_BORDER_BOX);
          o->callback((Fl_Callback*)cb_fdm);
          o->menu(menu_fdm);
        }
        { Fl_Value_Input* o = model_hz = new Fl_Value_Input(80, 265, 100, 25, "Model Hz:");
          o->tooltip("Rate to run FDM at (iterations per second)");
          o->minimum(1);
          o->maximum(1000);
          o->step(1);
          o->value(120);
        }
        { Fl_Value_Input* o = speed = new Fl_Value_Input(80, 300, 100, 25, "Speed:");
          o->tooltip("Run FDM \'n\' times faster than real time");
          o->minimum(1);
          o->maximum(1000);
          o->step(1);
          o->value(1);
        }
        { Fl_Check_Button* o = notrim = new Fl_Check_Button(80, 335, 100, 25, "No Trim");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Group* o = new Fl_Group(80, 365, 100, 55);
          o->labeltype(FL_NO_LABEL);
          { Fl_Round_Button* o = on_ground = new Fl_Round_Button(80, 365, 100, 25, "On Ground");
            o->tooltip("Start at ground level");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->value(1);
          }
          { Fl_Round_Button* o = in_air = new Fl_Round_Button(80, 395, 100, 25, "In Air");
            o->tooltip("Start in the air");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "Time");
        o->hide();
        { Fl_Round_Button* o = time_offset = new Fl_Round_Button(25, 225, 110, 25, "Time Offset = ");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_time_offset);
        }
        { Fl_Input* o = time_offset_text = new Fl_Input(165, 225, 85, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        { Fl_Round_Button* o = time_match_real = new Fl_Round_Button(25, 255, 140, 25, "Time Match Real");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_time_match_real);
        }
        { Fl_Round_Button* o = time_match_local = new Fl_Round_Button(25, 285, 140, 25, "Time Match Local");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_time_match_local);
        }
        { Fl_Round_Button* o = start_date_sys = new Fl_Round_Button(25, 315, 140, 25, "Start Date Sys = ");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_start_date_sys);
        }
        { Fl_Input* o = start_date_sys_text = new Fl_Input(165, 315, 85, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        { Fl_Round_Button* o = start_date_lat = new Fl_Round_Button(25, 345, 140, 25, "Start Date Lat =");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_start_date_lat);
        }
        { Fl_Round_Button* o = start_date_gmt = new Fl_Round_Button(25, 375, 140, 25, "Start Date GMT =");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_start_date_gmt);
        }
        { Fl_Input* o = start_date_lat_text = new Fl_Input(165, 345, 85, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        { Fl_Input* o = start_date_gmt_text = new Fl_Input(165, 375, 85, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "I/O");
        o->hide();
        { Fl_Browser* o = io_options_list = new Fl_Browser(10, 225, 475, 210);
          o->type(2);
          o->callback((Fl_Callback*)cb_io_options_list);
        }
        { Fl_Button* o = new Fl_Button(490, 225, 50, 25, "Add");
          o->callback((Fl_Callback*)cb_Add, (void*)("add"));
        }
        { Fl_Button* o = io_edit = new Fl_Button(490, 255, 50, 25, "Edit");
          o->callback((Fl_Callback*)cb_io_edit, (void*)("edit"));
          o->deactivate();
        }
        { Fl_Button* o = io_delete = new Fl_Button(490, 285, 50, 25, "Delete");
          o->callback((Fl_Callback*)cb_io_delete);
          o->deactivate();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "Network");
        o->tooltip("Enable telnet style property server");
        o->hide();
        { Fl_Check_Button* o = httpd = new Fl_Check_Button(70, 235, 25, 25, "httpd:");
          o->tooltip("Enable http style property server");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_httpd);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = props = new Fl_Check_Button(70, 265, 25, 25, "props:");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_props);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = jpg_httpd = new Fl_Check_Button(70, 295, 25, 25, "jpg-httpd:");
          o->tooltip("Enable screen shot http server");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_jpg_httpd);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Input* o = httpd_port = new Fl_Input(105, 235, 75, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        { Fl_Input* o = props_port = new Fl_Input(105, 265, 75, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        { Fl_Input* o = jpg_httpd_port = new Fl_Input(105, 295, 75, 25, "input:");
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 215, 640, 230, "Props");
        o->hide();
        { Fl_Browser* o = props_list = new Fl_Browser(10, 225, 570, 210);
          o->type(2);
        }
        new Fl_Button(585, 225, 50, 25, "Add");
        new Fl_Button(585, 255, 50, 25, "Edit");
        new Fl_Button(585, 285, 50, 25, "Delete");
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(400, 450, 55, 25, "Reset");
      o->tooltip("Reset all values to their defaults");
      o->callback((Fl_Callback*)cb_Reset);
    }
    { Fl_Button* o = new Fl_Button(350, 120, 55, 25, "Update");
      o->callback((Fl_Callback*)cb_Update);
    }
    { Fl_Button* o = new Fl_Button(350, 150, 55, 25, "Update");
      o->callback((Fl_Callback*)cb_Update1);
    }
    o->end();
  }
  { Fl_Window* o = addOptionDlg = new Fl_Window(496, 189, "I/O Options");
    w = o;
    o->user_data((void*)(this));
    { Fl_Choice* o = io_protocol = new Fl_Choice(70, 10, 115, 25, "Protocol:");
      o->down_box(FL_BORDER_BOX);
      o->menu(menu_io_protocol);
    }
    { Fl_Choice* o = io_medium = new Fl_Choice(70, 40, 115, 25, "Medium:");
      o->down_box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_io_medium);
      o->menu(menu_io_medium);
    }
    { Fl_Button* o = new Fl_Button(430, 160, 60, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    }
    { Fl_Button* o = io_option_ok = new Fl_Button(365, 160, 60, 25, "OK");
      o->callback((Fl_Callback*)cb_io_option_ok);
    }
    { Fl_Value_Input* o = io_hz = new Fl_Value_Input(70, 70, 115, 25, "Hz:");
      o->minimum(1);
      o->maximum(1000);
      o->step(1);
      o->value(5);
    }
    { Fl_Choice* o = io_dir = new Fl_Choice(70, 100, 115, 25, "Direction:");
      o->down_box(FL_BORDER_BOX);
      o->menu(menu_io_dir);
    }
    { Fl_Group* o = file_group = new Fl_Group(195, 0, 300, 155);
      o->labeltype(FL_NO_LABEL);
      o->hide();
      file_name = new Fl_Input(245, 10, 210, 25, "File:");
      file_button = new Fl_Button(460, 10, 25, 25, "...");
      o->end();
    }
    { Fl_Group* o = serial_group = new Fl_Group(195, 0, 300, 155);
      o->labeltype(FL_NO_LABEL);
      o->hide();
      serial_port = new Fl_Input(300, 10, 180, 25, "Port:");
      serial_baud = new Fl_Input(300, 40, 180, 25, "Baud Rate:");
      o->end();
    }
    { Fl_Group* o = socket_group = new Fl_Group(195, 0, 300, 155);
      o->labeltype(FL_NO_LABEL);
      o->hide();
      socket_hostname = new Fl_Input(300, 10, 180, 25, "Hostname:");
      { Fl_Value_Input* o = socket_port = new Fl_Value_Input(300, 40, 80, 25, "Port:");
        o->minimum(1025);
        o->maximum(65535);
        o->step(1);
        o->value(5050);
      }
      { Fl_Round_Button* o = socket_tcp = new Fl_Round_Button(300, 70, 80, 25, "TCP");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
      }
      { Fl_Round_Button* o = socket_udp = new Fl_Round_Button(380, 70, 80, 25, "UDP");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
      }
      o->end();
    }
    o->set_modal();
    o->end();
  }
  { Fl_Window* o = propertyDlg = new Fl_Window(334, 129, "Property");
    w = o;
    o->user_data((void*)(this));
    prop_name = new Fl_Input(65, 10, 265, 25, "Name:");
    prop_value = new Fl_Input(65, 40, 265, 25, "Value:");
    { Fl_Button* o = new Fl_Button(270, 100, 60, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel1);
    }
    { Fl_Button* o = new Fl_Button(205, 100, 60, 25, "OK");
      o->callback((Fl_Callback*)cb_OK);
    }
    o->end();
  }
  { Fl_Window* o = output_window = new Fl_Window(640, 480, "Output");
    w = o;
    o->user_data((void*)(this));
    output_text = new Fl_Text_Display(0, 25, 640, 455);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 640, 25);
      o->menu(menu_);
    }
    o->end();
    o->resizable(o);
  }
}

void UserInterface::show() {
  main_window->show();
}

void UserInterface::hide() {
  main_window->hide();
}

void UserInterface::load_settings() {
}

void UserInterface::save_settings() {
}

void UserInterface::reset() {
}

void UserInterface::run_fgfs() {
}

void UserInterface::update_airports() {
}

void UserInterface::update_aircraft() {
}

void UserInterface::select_fg_exe() {
}

void UserInterface::select_fg_root() {
}

void UserInterface::select_fg_scenery() {
}

void UserInterface::select_browser() {
}

void UserInterface::add_io_item() {
}

void UserInterface::edit_io_item() {
}

void UserInterface::delete_io_item() {
}

void UserInterface::OptionDlg_ok_cb() {
}

void UserInterface::io_medium_cb(Fl_Choice*, void*) {
}

void UserInterface::propertyDlg_ok() {
}

void UserInterface::propertyDlg_cancel() {
}
