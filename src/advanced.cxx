// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "i18n.h"
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "advanced.h"
#include <string.h>

void Advanced::cb_page_list_i(Fl_Browser* o, void*) {
  if (o->value() > 0)
  show_page(o->value()-1);
}
void Advanced::cb_page_list(Fl_Browser* o, void* v) {
  ((Advanced*)(o->parent()->user_data()))->cb_page_list_i(o,v);
}

void Advanced::cb__i(Fl_Button*, void*) {
  fg_browser_cb();
}
void Advanced::cb_(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void Advanced::cb_1_i(Fl_Button*, void*) {
  fg_config_cb();
}
void Advanced::cb_1(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void Advanced::cb_hud_i(Fl_Check_Button* o, void*) {
  if (o->value())
  antialias_hud->activate();
else
  antialias_hud->deactivate();
}
void Advanced::cb_hud(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_hud_i(o,v);
}

void Advanced::cb_failure_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  failure_pitot->activate();
  failure_static->activate();
  failure_system->activate();
  failure_vacuum->activate();
} else {
  failure_pitot->deactivate();
  failure_static->deactivate();
  failure_system->deactivate();
  failure_vacuum->deactivate();
};
}
void Advanced::cb_failure(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_failure_i(o,v);
}

void Advanced::cb_fdm_i(Fl_Choice* o, void*) {
  if (strcmp(o->text(), "jsb") == 0){
  notrim->activate();
} else {
  notrim->deactivate();
};
}
void Advanced::cb_fdm(Fl_Choice* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_fdm_i(o,v);
}

Fl_Menu_Item Advanced::menu_fdm[] = {
 {_("ada"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("balloon"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("external"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("jsb"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("larcsim"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("magic"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("network"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("null"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("ufo"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("yasim"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item Advanced::menu_bpp[] = {
 {_("16"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("24"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("32"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Advanced::cb_time_match_real_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_value->activate();
  start_date_sys_value->deactivate();
  start_date_gmt_value->deactivate();
  start_date_lat_value->deactivate();
  time_of_day_value->deactivate();
  time_offset_value->take_focus();
};
}
void Advanced::cb_time_match_real(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_time_match_real_i(o,v);
}

void Advanced::cb_time_match_local_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_value->deactivate();
  start_date_sys_value->deactivate();
  start_date_gmt_value->deactivate();
  start_date_lat_value->deactivate();
  time_of_day_value->deactivate();
};
}
void Advanced::cb_time_match_local(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_time_match_local_i(o,v);
}

void Advanced::cb_start_date_sys_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_value->deactivate();
  start_date_sys_value->activate();
  start_date_gmt_value->deactivate();
  start_date_lat_value->deactivate();
  time_of_day_value->deactivate();
  start_date_sys_value->take_focus();
};
}
void Advanced::cb_start_date_sys(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_start_date_sys_i(o,v);
}

void Advanced::cb_start_date_gmt_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_value->deactivate();
  start_date_sys_value->deactivate();
  start_date_gmt_value->activate();
  start_date_lat_value->deactivate();
  time_of_day_value->deactivate();
  start_date_gmt_value->take_focus();
};
}
void Advanced::cb_start_date_gmt(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_start_date_gmt_i(o,v);
}

void Advanced::cb_start_date_lat_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_value->deactivate();
  start_date_sys_value->deactivate();
  start_date_gmt_value->deactivate();
  start_date_lat_value->activate();
  time_of_day_value->deactivate();
  start_date_lat_value->take_focus();
};
}
void Advanced::cb_start_date_lat(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_start_date_lat_i(o,v);
}

void Advanced::cb_start_date_sys_value_i(Fl_Input*, void*) {
  start_date_sys->setonly();
}
void Advanced::cb_start_date_sys_value(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_start_date_sys_value_i(o,v);
}

void Advanced::cb_start_date_gmt_value_i(Fl_Input*, void*) {
  start_date_gmt->setonly();
}
void Advanced::cb_start_date_gmt_value(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_start_date_gmt_value_i(o,v);
}

void Advanced::cb_start_date_lat_value_i(Fl_Input*, void*) {
  start_date_lat->setonly();
}
void Advanced::cb_start_date_lat_value(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_start_date_lat_value_i(o,v);
}

void Advanced::cb_time_of_day_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  time_offset_value->deactivate();
  start_date_sys_value->deactivate();
  start_date_gmt_value->deactivate();
  start_date_lat_value->deactivate();
  time_of_day_value->activate();
  time_of_day_value->take_focus();
};
}
void Advanced::cb_time_of_day(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_time_of_day_i(o,v);
}

void Advanced::cb_httpd_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  httpd_port->activate();
  httpd_port->take_focus();
} else {
  httpd_port->deactivate();
};
}
void Advanced::cb_httpd(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_httpd_i(o,v);
}

void Advanced::cb_props_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  props_port->activate();
  props_port->take_focus();
} else {
  props_port->deactivate();
};
}
void Advanced::cb_props(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_props_i(o,v);
}

void Advanced::cb_jpg_httpd_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  jpg_httpd_port->activate();
  jpg_httpd_port->take_focus();
} else {
  jpg_httpd_port->deactivate();
};
}
void Advanced::cb_jpg_httpd(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_jpg_httpd_i(o,v);
}

void Advanced::cb_io_list_i(Fl_Browser* o, void*) {
  io_list_select_cb(o);
}
void Advanced::cb_io_list(Fl_Browser* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_io_list_i(o,v);
}

void Advanced::cb_io_new_i(Fl_Button*, void*) {
  io_list_new_cb();
}
void Advanced::cb_io_new(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_io_new_i(o,v);
}

void Advanced::cb_io_delete_i(Fl_Button*, void*) {
  if (io_list->value() > 0) {
  io_list->remove( io_list->value() );
};
}
void Advanced::cb_io_delete(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_io_delete_i(o,v);
}

void Advanced::cb_io_protocol_i(Fl_Choice*, void*) {
  io_protocol_update_cb();
}
void Advanced::cb_io_protocol(Fl_Choice* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_io_protocol_i(o,v);
}

Fl_Menu_Item Advanced::menu_io_protocol[] = {
 {_("atcsim"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("atlas"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("garmin"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("AV400"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("AV400Sim"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("generic"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("joyclient"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("jsclient"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("native"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("native-ctrls"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("native-fdm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("native-gui"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("nmea"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("opengc"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("pve"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("props"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("ray"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("rul"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("telnet"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Advanced::cb_io_medium_i(Fl_Choice* o, void*) {
  io_medium_update_cb( o );
}
void Advanced::cb_io_medium(Fl_Choice* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_io_medium_i(o,v);
}

Fl_Menu_Item Advanced::menu_io_medium[] = {
 {_("file"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("serial"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("socket"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Advanced::cb_io_dir_i(Fl_Choice*, void*) {
  io_list_update_cb();
}
void Advanced::cb_io_dir(Fl_Choice* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_io_dir_i(o,v);
}

Fl_Menu_Item Advanced::menu_io_dir[] = {
 {_("in"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("out"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("bi"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Advanced::cb_io_hz_i(Fl_Value_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_io_hz(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_io_hz_i(o,v);
}

void Advanced::cb_io_file_name_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_io_file_name(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_io_file_name_i(o,v);
}

void Advanced::cb_2_i(Fl_Button*, void*) {
  io_file_cb();
}
void Advanced::cb_2(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void Advanced::cb_serial_port_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_serial_port(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_serial_port_i(o,v);
}

void Advanced::cb_serial_baud_rate_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_serial_baud_rate(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_serial_baud_rate_i(o,v);
}

void Advanced::cb_socket_host_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_socket_host(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_socket_host_i(o,v);
}

void Advanced::cb_socket_port_i(Fl_Value_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_socket_port(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_socket_port_i(o,v);
}

void Advanced::cb_socket_tcp_i(Fl_Round_Button*, void*) {
  io_list_update_cb();
}
void Advanced::cb_socket_tcp(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_socket_tcp_i(o,v);
}

void Advanced::cb_socket_udp_i(Fl_Round_Button*, void*) {
  io_list_update_cb();
}
void Advanced::cb_socket_udp(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_socket_udp_i(o,v);
}

void Advanced::cb_io_generic_file_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void Advanced::cb_io_generic_file(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_io_generic_file_i(o,v);
}

void Advanced::cb_3_i(Fl_Button*, void*) {
  io_generic_file_cb();
}
void Advanced::cb_3(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void Advanced::cb_dme_nav1_i(Fl_Round_Button* o, void*) {
  if (o->value())
  dme_int_freq->deactivate();
}
void Advanced::cb_dme_nav1(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_dme_nav1_i(o,v);
}

void Advanced::cb_dme_nav2_i(Fl_Round_Button* o, void*) {
  if (o->value())
  dme_int_freq->deactivate();
}
void Advanced::cb_dme_nav2(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_dme_nav2_i(o,v);
}

void Advanced::cb_dme_int_i(Fl_Round_Button* o, void*) {
  if (o->value())
  dme_int_freq->activate();
}
void Advanced::cb_dme_int(Fl_Round_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_dme_int_i(o,v);
}

void Advanced::cb_dme_i(Fl_Check_Button* o, void*) {
  if (o->value())
  dme_group->activate();
else
  dme_group->deactivate();
}
void Advanced::cb_dme(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_dme_i(o,v);
}

void Advanced::cb_prop_list_i(Fl_Browser*, void*) {
  list_select_cb(
  prop_list,
  prop_input,
  prop_delete );
}
void Advanced::cb_prop_list(Fl_Browser* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_prop_list_i(o,v);
}

void Advanced::cb_prop_delete_i(Fl_Button*, void*) {
  list_delete_cb(
  prop_list,
  prop_input,
  prop_delete );
}
void Advanced::cb_prop_delete(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_prop_delete_i(o,v);
}

void Advanced::cb_prop_input_i(Fl_Input*, void*) {
  list_update_cb(
  prop_list,
  prop_input );
}
void Advanced::cb_prop_input(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_prop_input_i(o,v);
}

void Advanced::cb_New_i(Fl_Button*, void*) {
  list_new_cb(
  prop_list,
  prop_input,
  prop_delete );
}
void Advanced::cb_New(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_New_i(o,v);
}

void Advanced::cb_trace_read_list_i(Fl_Browser*, void*) {
  list_select_cb(
  trace_read_list,
  trace_read_input,
  trace_read_delete );
}
void Advanced::cb_trace_read_list(Fl_Browser* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_trace_read_list_i(o,v);
}

void Advanced::cb_trace_read_input_i(Fl_Input*, void*) {
  list_update_cb(
  trace_read_list,
  trace_read_input );
}
void Advanced::cb_trace_read_input(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_trace_read_input_i(o,v);
}

void Advanced::cb_New1_i(Fl_Button*, void*) {
  list_new_cb(
  trace_read_list,
  trace_read_input,
  trace_read_delete );
}
void Advanced::cb_New1(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_New1_i(o,v);
}

void Advanced::cb_trace_read_delete_i(Fl_Button*, void*) {
  list_delete_cb(
  trace_read_list,
  trace_read_input,
  trace_read_delete );
}
void Advanced::cb_trace_read_delete(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_trace_read_delete_i(o,v);
}

void Advanced::cb_trace_write_list_i(Fl_Browser*, void*) {
  list_select_cb(
  trace_write_list,
  trace_write_input,
  trace_write_delete );
}
void Advanced::cb_trace_write_list(Fl_Browser* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_trace_write_list_i(o,v);
}

void Advanced::cb_trace_write_input_i(Fl_Input*, void*) {
  list_update_cb(
  trace_write_list,
  trace_write_input );
}
void Advanced::cb_trace_write_input(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_trace_write_input_i(o,v);
}

void Advanced::cb_New2_i(Fl_Button*, void*) {
  list_new_cb(
  trace_write_list,
  trace_write_input,
  trace_write_delete );
}
void Advanced::cb_New2(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_New2_i(o,v);
}

void Advanced::cb_trace_write_delete_i(Fl_Button*, void*) {
  list_delete_cb(
  trace_write_list,
  trace_write_input,
  trace_write_delete );
}
void Advanced::cb_trace_write_delete(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_trace_write_delete_i(o,v);
}

void Advanced::cb_env_list_i(Fl_Browser*, void*) {
  list_select_cb(
  env_list,
  env_input,
  env_delete );
}
void Advanced::cb_env_list(Fl_Browser* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_env_list_i(o,v);
}

void Advanced::cb_New3_i(Fl_Button*, void*) {
  list_new_cb(
  env_list,
  env_input,
  env_delete );
}
void Advanced::cb_New3(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_New3_i(o,v);
}

void Advanced::cb_env_delete_i(Fl_Button*, void*) {
  list_delete_cb(
  env_list,
  env_input,
  env_delete );
}
void Advanced::cb_env_delete(Fl_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_env_delete_i(o,v);
}

void Advanced::cb_env_input_i(Fl_Input*, void*) {
  list_update_cb(
  env_list,
  env_input );
}
void Advanced::cb_env_input(Fl_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_env_input_i(o,v);
}

void Advanced::cb_wind_dial_i(Fl_Heading_Dial*, void*) {
  wind_dial_cb();
}
void Advanced::cb_wind_dial(Fl_Heading_Dial* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_wind_dial_i(o,v);
}

void Advanced::cb_wind_hdg_i(Fl_Value_Input*, void*) {
  wind_hdg_cb();
}
void Advanced::cb_wind_hdg(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_wind_hdg_i(o,v);
}

void Advanced::cb_random_wind_i(Fl_Check_Button*, void*) {
  random_wind_cb();
}
void Advanced::cb_random_wind(Fl_Check_Button* o, void* v) {
  ((Advanced*)(o->parent()->parent()->parent()->user_data()))->cb_random_wind_i(o,v);
}

void Advanced::cb_cloud_layer__i(Fl_Choice*, void*) {
  cloud_layer_cb();
}
void Advanced::cb_cloud_layer_(Fl_Choice* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_cloud_layer__i(o,v);
}

Fl_Menu_Item Advanced::menu_cloud_layer_[] = {
 {_("0"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Advanced::cb_cloud_elevation__i(Fl_Value_Input*, void*) {
  cloud_elevation[ cloud_layer_->value() ] = cloud_elevation_->value();
}
void Advanced::cb_cloud_elevation_(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_cloud_elevation__i(o,v);
}

void Advanced::cb_cloud_thickness__i(Fl_Value_Input*, void*) {
  cloud_thickness[ cloud_layer_->value() ] = cloud_thickness_->value();
}
void Advanced::cb_cloud_thickness_(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_cloud_thickness__i(o,v);
}

void Advanced::cb_cloud_coverage__i(Fl_Choice*, void*) {
  cloud_coverage[ cloud_layer_->value() ] = cloud_coverage_->value();
}
void Advanced::cb_cloud_coverage_(Fl_Choice* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_cloud_coverage__i(o,v);
}

void Advanced::cb_cloud_span__i(Fl_Value_Input*, void*) {
  cloud_span[ cloud_layer_->value() ] = cloud_span_->value();
}
void Advanced::cb_cloud_span_(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_cloud_span__i(o,v);
}

void Advanced::cb_cloud_transition__i(Fl_Value_Input*, void*) {
  cloud_transition[ cloud_layer_->value() ] = cloud_transition_->value();
}
void Advanced::cb_cloud_transition_(Fl_Value_Input* o, void* v) {
  ((Advanced*)(o->parent()->parent()->user_data()))->cb_cloud_transition__i(o,v);
}

Advanced::Advanced() {
  { main_window = new Fl_Double_Window(640, 480, _("Advanced Options"));
    main_window->labelsize(12);
    main_window->user_data((void*)(this));
    { page_list = new Fl_Browser(0, 0, 150, 430);
      page_list->type(2);
      page_list->labelsize(12);
      page_list->textsize(12);
      page_list->callback((Fl_Callback*)cb_page_list);
    } // Fl_Browser* page_list
    { Fl_Box* o = new Fl_Box(150, 0, 485, 430);
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(0, 435, 640, 45);
      { button[1] = new Fl_Button(565, 450, 70, 25, _("Cancel"));
        button[1]->labelsize(12);
      } // Fl_Button* button[1]
      { button[0] = new Fl_Button(490, 450, 70, 25, _("OK"));
        button[0]->labelsize(12);
      } // Fl_Button* button[0]
      { Fl_Box* o = new Fl_Box(20, 435, 460, 15);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { page[0] = new Fl_Group(150, 0, 490, 430, _("General"));
      page[0]->labelfont(1);
      page[0]->labelsize(16);
      page[0]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[0]->hide();
      { control = new Fl_Choice(250, 175, 150, 25, _("Control:"));
        control->tooltip(_("Primary control mode"));
        control->down_box(FL_BORDER_BOX);
        control->labelsize(12);
        control->textsize(12);
      } // Fl_Choice* control
      { lang = new Fl_Input(250, 220, 80, 25, _("Language:"));
        lang->labelsize(12);
        lang->textsize(12);
      } // Fl_Input* lang
      { browser = new Fl_Input(250, 250, 355, 25, _("Browser:"));
        browser->labelsize(12);
        browser->textsize(12);
      } // Fl_Input* browser
      { Fl_Button* o = new Fl_Button(610, 250, 25, 25, _("..."));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { config = new Fl_Input(250, 280, 355, 25, _("Config:"));
        config->tooltip(_("Path to additional XML properties file"));
        config->labelsize(12);
        config->textsize(12);
      } // Fl_Input* config
      { Fl_Button* o = new Fl_Button(610, 280, 25, 25, _("..."));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { fg_exe_ = new Fl_Output(250, 25, 385, 25, _("Executable:"));
        fg_exe_->labelsize(12);
        fg_exe_->textsize(12);
      } // Fl_Output* fg_exe_
      { fg_root_ = new Fl_Output(250, 55, 385, 25, _("FG_ROOT:"));
        fg_root_->labelsize(12);
        fg_root_->textsize(12);
      } // Fl_Output* fg_root_
      { fg_scenery_ = new Fl_Output(250, 85, 385, 25, _("FG_SCENERY:"));
        fg_scenery_->labelsize(12);
        fg_scenery_->textsize(12);
      } // Fl_Output* fg_scenery_
      { airport_ = new Fl_Output(250, 115, 240, 25, _("Airport:"));
        airport_->labelsize(12);
        airport_->textsize(12);
      } // Fl_Output* airport_
      { runway_ = new Fl_Output(555, 115, 80, 25, _("Runway:"));
        runway_->labelsize(12);
        runway_->textsize(12);
      } // Fl_Output* runway_
      { aircraft_ = new Fl_Output(250, 145, 240, 25, _("Aircraft:"));
        aircraft_->labelsize(12);
        aircraft_->textsize(12);
      } // Fl_Output* aircraft_
      { Fl_Box* o = new Fl_Box(255, 405, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[0]->end();
    } // Fl_Group* page[0]
    { page[1] = new Fl_Group(150, 0, 490, 430, _("Features"));
      page[1]->labelfont(1);
      page[1]->labelsize(16);
      page[1]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[1]->hide();
      { game_mode = new Fl_Check_Button(175, 50, 160, 25, _("Game Mode"));
        game_mode->tooltip(_("Enable full screen game mode"));
        game_mode->down_box(FL_DOWN_BOX);
        game_mode->labelsize(12);
      } // Fl_Check_Button* game_mode
      { splash_screen = new Fl_Check_Button(175, 80, 160, 25, _("Splash Screen"));
        splash_screen->tooltip(_("Display splash screen at startup"));
        splash_screen->down_box(FL_DOWN_BOX);
        splash_screen->value(1);
        splash_screen->labelsize(12);
      } // Fl_Check_Button* splash_screen
      { intro_music = new Fl_Check_Button(175, 110, 160, 25, _("Intro Music"));
        intro_music->tooltip(_("Enable introduction music during start up"));
        intro_music->down_box(FL_DOWN_BOX);
        intro_music->value(1);
        intro_music->labelsize(12);
      } // Fl_Check_Button* intro_music
      { mouse_pointer = new Fl_Check_Button(175, 140, 160, 25, _("Mouse Pointer"));
        mouse_pointer->tooltip(_("Enable extra mouse pointer"));
        mouse_pointer->down_box(FL_DOWN_BOX);
        mouse_pointer->labelsize(12);
      } // Fl_Check_Button* mouse_pointer
      { random_objects = new Fl_Check_Button(175, 170, 160, 25, _("Random Objects"));
        random_objects->tooltip(_("Enable random scenery objects"));
        random_objects->down_box(FL_DOWN_BOX);
        random_objects->labelsize(12);
      } // Fl_Check_Button* random_objects
      { panel = new Fl_Check_Button(345, 50, 140, 25, _("Panel"));
        panel->tooltip(_("Enable the instrument panel"));
        panel->down_box(FL_DOWN_BOX);
        panel->value(1);
        panel->labelsize(12);
      } // Fl_Check_Button* panel
      { sound = new Fl_Check_Button(345, 80, 140, 25, _("Sound"));
        sound->tooltip(_("Enable sound effects"));
        sound->down_box(FL_DOWN_BOX);
        sound->value(1);
        sound->labelsize(12);
      } // Fl_Check_Button* sound
      { hud = new Fl_Check_Button(345, 110, 140, 25, _("HUD"));
        hud->tooltip(_("Enable Heads Up Display"));
        hud->down_box(FL_DOWN_BOX);
        hud->labelsize(12);
        hud->callback((Fl_Callback*)cb_hud);
      } // Fl_Check_Button* hud
      { antialias_hud = new Fl_Check_Button(360, 140, 130, 25, _("Anti-alias HUD"));
        antialias_hud->tooltip(_("Enable anti-aliased HUD"));
        antialias_hud->down_box(FL_DOWN_BOX);
        antialias_hud->labelsize(12);
        antialias_hud->deactivate();
      } // Fl_Check_Button* antialias_hud
      { auto_coordination = new Fl_Check_Button(345, 200, 140, 25, _("Auto-coordination"));
        auto_coordination->tooltip(_("Enable auto-coordinated turns."));
        auto_coordination->down_box(FL_DOWN_BOX);
        auto_coordination->labelsize(12);
      } // Fl_Check_Button* auto_coordination
      { horizon_effect = new Fl_Check_Button(175, 230, 160, 25, _("Horizon effect"));
        horizon_effect->tooltip(_("Enable celestial body growth illusion near the horizon"));
        horizon_effect->down_box(FL_DOWN_BOX);
        horizon_effect->labelsize(12);
      } // Fl_Check_Button* horizon_effect
      { enhanced_lighting = new Fl_Check_Button(175, 260, 160, 25, _("Enhanced lighting"));
        enhanced_lighting->tooltip(_("Enable enhanced runway lighting"));
        enhanced_lighting->down_box(FL_DOWN_BOX);
        enhanced_lighting->labelsize(12);
      } // Fl_Check_Button* enhanced_lighting
      { distance_attenuation = new Fl_Check_Button(175, 290, 160, 25, _("Distance attenuation"));
        distance_attenuation->tooltip(_("Enable runway light distance attenuation"));
        distance_attenuation->down_box(FL_DOWN_BOX);
        distance_attenuation->labelsize(12);
      } // Fl_Check_Button* distance_attenuation
      { hud_3d = new Fl_Check_Button(345, 170, 140, 25, _("Hud-3D"));
        hud_3d->tooltip(_("Enable 3D HUD"));
        hud_3d->down_box(FL_DOWN_BOX);
        hud_3d->labelsize(12);
      } // Fl_Check_Button* hud_3d
      { specular_highlight = new Fl_Check_Button(175, 320, 160, 25, _("Specular highlight"));
        specular_highlight->tooltip(_("Enable specular reflections on textured objects"));
        specular_highlight->down_box(FL_DOWN_BOX);
        specular_highlight->labelsize(12);
      } // Fl_Check_Button* specular_highlight
      { failure = new Fl_Check_Button(485, 50, 150, 25, _("Failures"));
        failure->down_box(FL_DOWN_BOX);
        failure->labelsize(12);
        failure->callback((Fl_Callback*)cb_failure);
      } // Fl_Check_Button* failure
      { failure_pitot = new Fl_Check_Button(505, 75, 130, 25, _("pitot"));
        failure_pitot->down_box(FL_DOWN_BOX);
        failure_pitot->labelsize(12);
        failure_pitot->deactivate();
      } // Fl_Check_Button* failure_pitot
      { failure_static = new Fl_Check_Button(505, 100, 130, 25, _("static"));
        failure_static->down_box(FL_DOWN_BOX);
        failure_static->labelsize(12);
        failure_static->deactivate();
      } // Fl_Check_Button* failure_static
      { failure_system = new Fl_Check_Button(505, 125, 130, 25, _("system"));
        failure_system->down_box(FL_DOWN_BOX);
        failure_system->labelsize(12);
        failure_system->deactivate();
      } // Fl_Check_Button* failure_system
      { failure_vacuum = new Fl_Check_Button(505, 150, 130, 25, _("vacuum"));
        failure_vacuum->down_box(FL_DOWN_BOX);
        failure_vacuum->labelsize(12);
        failure_vacuum->deactivate();
      } // Fl_Check_Button* failure_vacuum
      { ai_models = new Fl_Check_Button(345, 230, 140, 25, _("AI Traffic"));
        ai_models->tooltip(_("Enable AI traffic"));
        ai_models->down_box(FL_DOWN_BOX);
        ai_models->labelsize(12);
      } // Fl_Check_Button* ai_models
      { random_trees = new Fl_Check_Button(175, 200, 160, 25, _("Random Trees"));
        random_trees->down_box(FL_DOWN_BOX);
        random_trees->labelsize(12);
      } // Fl_Check_Button* random_trees
      { Fl_Box* o = new Fl_Box(615, 405, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[1]->end();
    } // Fl_Group* page[1]
    { page[2] = new Fl_Group(150, 0, 490, 430, _("Flight Model"));
      page[2]->labelfont(1);
      page[2]->labelsize(16);
      page[2]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[2]->hide();
      { fdm = new Fl_Choice(270, 45, 105, 25, _("FDM:"));
        fdm->tooltip(_("Core Flight Dynamics Model"));
        fdm->down_box(FL_BORDER_BOX);
        fdm->labelsize(12);
        fdm->textsize(12);
        fdm->callback((Fl_Callback*)cb_fdm);
        fdm->menu(menu_fdm);
      } // Fl_Choice* fdm
      { notrim = new Fl_Check_Button(290, 75, 85, 25, _("No Trim"));
        notrim->tooltip(_("Do not attempt to trim the model"));
        notrim->down_box(FL_DOWN_BOX);
        notrim->labelsize(12);
        notrim->deactivate();
      } // Fl_Check_Button* notrim
      { model_hz = new Fl_Value_Input(270, 105, 105, 25, _("Model Hz:"));
        model_hz->tooltip(_("Run the FDM at this rate (iterations per second)"));
        model_hz->labelsize(12);
        model_hz->minimum(1);
        model_hz->maximum(1000);
        model_hz->step(1);
        model_hz->value(120);
        model_hz->textsize(12);
      } // Fl_Value_Input* model_hz
      { speed = new Fl_Value_Input(270, 135, 105, 25, _("Speed:"));
        speed->tooltip(_("Run FDM faster than real time"));
        speed->labelsize(12);
        speed->minimum(1);
        speed->maximum(1000);
        speed->step(1);
        speed->value(1);
        speed->textsize(12);
      } // Fl_Value_Input* speed
      { Fl_Group* o = new Fl_Group(220, 170, 155, 50);
        { on_ground = new Fl_Round_Button(270, 170, 105, 25, _("On Ground"));
          on_ground->tooltip(_("Start at ground level"));
          on_ground->type(102);
          on_ground->down_box(FL_ROUND_DOWN_BOX);
          on_ground->value(1);
          on_ground->labelsize(12);
        } // Fl_Round_Button* on_ground
        { in_air = new Fl_Round_Button(270, 195, 105, 25, _("In Air"));
          in_air->tooltip(_("Start in the air"));
          in_air->type(102);
          in_air->down_box(FL_ROUND_DOWN_BOX);
          in_air->labelsize(12);
        } // Fl_Round_Button* in_air
        o->end();
      } // Fl_Group* o
      { Fl_Box* o = new Fl_Box(615, 405, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[2]->end();
    } // Fl_Group* page[2]
    { page[3] = new Fl_Group(150, 0, 490, 435, _("Freeze"));
      page[3]->labelfont(1);
      page[3]->labelsize(16);
      page[3]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[3]->hide();
      { freeze = new Fl_Check_Button(175, 35, 265, 25, _("Freeze"));
        freeze->tooltip(_("Start paused"));
        freeze->down_box(FL_DOWN_BOX);
        freeze->labelsize(12);
      } // Fl_Check_Button* freeze
      { fuel_freeze = new Fl_Check_Button(175, 65, 265, 25, _("Fuel Freeze"));
        fuel_freeze->down_box(FL_DOWN_BOX);
        fuel_freeze->labelsize(12);
      } // Fl_Check_Button* fuel_freeze
      { clock_freeze = new Fl_Check_Button(175, 95, 265, 25, _("Clock Freeze"));
        clock_freeze->down_box(FL_DOWN_BOX);
        clock_freeze->labelsize(12);
      } // Fl_Check_Button* clock_freeze
      { Fl_Box* o = new Fl_Box(615, 410, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[3]->end();
    } // Fl_Group* page[3]
    { page[4] = new Fl_Group(150, 0, 490, 430, _("Initial Position"));
      page[4]->labelfont(1);
      page[4]->labelsize(16);
      page[4]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[4]->hide();
      { lon = new Fl_Input(245, 35, 150, 25, _("Longitude:"));
        lon->tooltip(_("Initial longitude, west is negative"));
        lon->labelsize(12);
        lon->textsize(12);
      } // Fl_Input* lon
      { lat = new Fl_Input(245, 65, 150, 25, _("Latitude:"));
        lat->tooltip(_("Initial latitude, south is negative"));
        lat->labelsize(12);
        lat->textsize(12);
      } // Fl_Input* lat
      { altitude = new Fl_Input(245, 95, 150, 25, _("Altitude:"));
        altitude->tooltip(_("Initial altitude in feet"));
        altitude->type(1);
        altitude->labelsize(12);
        altitude->textsize(12);
      } // Fl_Input* altitude
      { vc = new Fl_Input(245, 215, 150, 25, _("Airspeed:"));
        vc->tooltip(_("Initial airspeed in knots"));
        vc->type(1);
        vc->labelsize(12);
        vc->textsize(12);
      } // Fl_Input* vc
      { uBody = new Fl_Input(245, 265, 150, 25, _("uBody:"));
        uBody->labelsize(12);
        uBody->textsize(12);
      } // Fl_Input* uBody
      { vBody = new Fl_Input(245, 295, 150, 25, _("vBody:"));
        vBody->labelsize(12);
        vBody->textsize(12);
      } // Fl_Input* vBody
      { wBody = new Fl_Input(245, 325, 150, 25, _("wBody"));
        wBody->labelsize(12);
        wBody->textsize(12);
      } // Fl_Input* wBody
      { heading = new Fl_Value_Input(245, 125, 150, 25, _("Heading:"));
        heading->tooltip(_("Initial aircraft heading (yaw) angle 0 to 360 degrees"));
        heading->labelsize(12);
        heading->maximum(360);
        heading->step(1);
        heading->textsize(12);
      } // Fl_Value_Input* heading
      { roll = new Fl_Value_Input(245, 155, 150, 25, _("Roll:"));
        roll->tooltip(_("Initial roll angle, (Phi)"));
        roll->labelsize(12);
        roll->minimum(-180);
        roll->maximum(180);
        roll->step(0.1);
        roll->textsize(12);
      } // Fl_Value_Input* roll
      { pitch = new Fl_Value_Input(245, 185, 150, 25, _("Pitch:"));
        pitch->tooltip(_("Initial pitch angle (Theta)"));
        pitch->labelsize(12);
        pitch->minimum(-180);
        pitch->maximum(180);
        pitch->step(0.1);
        pitch->textsize(12);
      } // Fl_Value_Input* pitch
      { vor = new Fl_Input(520, 35, 80, 25, _("VOR:"));
        vor->labelsize(12);
        vor->textsize(12);
        vor->deactivate();
      } // Fl_Input* vor
      { ndb = new Fl_Input(520, 65, 80, 25, _("NDB:"));
        ndb->labelsize(12);
        ndb->textsize(12);
        ndb->deactivate();
      } // Fl_Input* ndb
      { fix = new Fl_Input(520, 95, 80, 25, _("Fix:"));
        fix->labelsize(12);
        fix->textsize(12);
        fix->deactivate();
      } // Fl_Input* fix
      { offset_distance = new Fl_Input(520, 125, 80, 25, _("offset distance:"));
        offset_distance->labelsize(12);
        offset_distance->textsize(12);
        offset_distance->deactivate();
      } // Fl_Input* offset_distance
      { offset_azimuth = new Fl_Input(520, 155, 80, 25, _("offset azimuth:"));
        offset_azimuth->labelsize(12);
        offset_azimuth->textsize(12);
        offset_azimuth->deactivate();
      } // Fl_Input* offset_azimuth
      { glideslope = new Fl_Input(520, 185, 80, 25, _("Glide slope:"));
        glideslope->labelsize(12);
        glideslope->textsize(12);
        glideslope->deactivate();
      } // Fl_Input* glideslope
      { roc = new Fl_Input(520, 215, 80, 25, _("Climb rate:"));
        roc->labelsize(12);
        roc->textsize(12);
        roc->deactivate();
      } // Fl_Input* roc
      { Fl_Box* o = new Fl_Box(245, 405, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[4]->end();
    } // Fl_Group* page[4]
    { page[5] = new Fl_Group(150, 0, 490, 440, _("Rendering"));
      page[5]->labelfont(1);
      page[5]->labelsize(16);
      page[5]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[5]->hide();
      { clouds = new Fl_Check_Button(180, 40, 120, 25, _("Clouds"));
        clouds->tooltip(_("Enable 2D (flat) cloud layers"));
        clouds->down_box(FL_DOWN_BOX);
        clouds->value(1);
        clouds->labelsize(12);
      } // Fl_Check_Button* clouds
      { clouds3d = new Fl_Check_Button(180, 70, 120, 25, _("3D Clouds"));
        clouds3d->tooltip(_("Enable 3D (volumetric) cloud layers"));
        clouds3d->down_box(FL_DOWN_BOX);
        clouds3d->labelsize(12);
      } // Fl_Check_Button* clouds3d
      { fullscreen = new Fl_Check_Button(180, 100, 120, 25, _("Full Screen"));
        fullscreen->tooltip(_("Enable full screen mode"));
        fullscreen->down_box(FL_DOWN_BOX);
        fullscreen->labelsize(12);
      } // Fl_Check_Button* fullscreen
      { skyblend = new Fl_Check_Button(180, 130, 120, 25, _("Sky Blend"));
        skyblend->tooltip(_("Enable sky blending"));
        skyblend->down_box(FL_DOWN_BOX);
        skyblend->value(1);
        skyblend->labelsize(12);
      } // Fl_Check_Button* skyblend
      { textures = new Fl_Check_Button(180, 160, 120, 25, _("Textures"));
        textures->tooltip(_("Enable textures"));
        textures->down_box(FL_DOWN_BOX);
        textures->value(1);
        textures->labelsize(12);
      } // Fl_Check_Button* textures
      { wireframe = new Fl_Check_Button(180, 190, 120, 25, _("Wireframe"));
        wireframe->tooltip(_("Enable wireframe drawing mode"));
        wireframe->down_box(FL_DOWN_BOX);
        wireframe->labelsize(12);
      } // Fl_Check_Button* wireframe
      { Fl_Group* o = new Fl_Group(315, 45, 120, 100, _("Shading"));
        o->labelfont(1);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        { shading_smooth = new Fl_Round_Button(330, 70, 105, 25, _("Smooth"));
          shading_smooth->type(102);
          shading_smooth->down_box(FL_ROUND_DOWN_BOX);
          shading_smooth->value(1);
          shading_smooth->labelsize(12);
        } // Fl_Round_Button* shading_smooth
        { shading_flat = new Fl_Round_Button(330, 95, 105, 25, _("Flat"));
          shading_flat->type(102);
          shading_flat->down_box(FL_ROUND_DOWN_BOX);
          shading_flat->labelsize(12);
        } // Fl_Round_Button* shading_flat
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(450, 45, 120, 100, _("Fog"));
        o->labelfont(1);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        { fog_disabled = new Fl_Round_Button(460, 70, 110, 25, _("Disabled"));
          fog_disabled->type(102);
          fog_disabled->down_box(FL_ROUND_DOWN_BOX);
          fog_disabled->labelsize(12);
        } // Fl_Round_Button* fog_disabled
        { fog_fastest = new Fl_Round_Button(460, 95, 110, 25, _("Fastest"));
          fog_fastest->type(102);
          fog_fastest->down_box(FL_ROUND_DOWN_BOX);
          fog_fastest->labelsize(12);
        } // Fl_Round_Button* fog_fastest
        { fog_nicest = new Fl_Round_Button(460, 120, 110, 25, _("Nicest"));
          fog_nicest->type(102);
          fog_nicest->down_box(FL_ROUND_DOWN_BOX);
          fog_nicest->value(1);
          fog_nicest->labelsize(12);
        } // Fl_Round_Button* fog_nicest
        o->end();
      } // Fl_Group* o
      { geometry = new Fl_Input(235, 265, 120, 25, _("Geometry:"));
        geometry->tooltip(_("Window geometry, WxH"));
        geometry->labelsize(12);
        geometry->textsize(12);
      } // Fl_Input* geometry
      { visibility = new Fl_Input(235, 295, 120, 25, _("Visibility:"));
        visibility->tooltip(_("Initial visibility distance"));
        visibility->type(1);
        visibility->labelsize(12);
        visibility->textsize(12);
      } // Fl_Input* visibility
      { Fl_Group* o = new Fl_Group(225, 320, 120, 50);
        { vis_meters = new Fl_Round_Button(235, 320, 60, 25, _("Meters"));
          vis_meters->tooltip(_("Specify visibilty in meters"));
          vis_meters->type(102);
          vis_meters->down_box(FL_ROUND_DOWN_BOX);
          vis_meters->value(1);
          vis_meters->labelsize(12);
        } // Fl_Round_Button* vis_meters
        { vis_miles = new Fl_Round_Button(235, 345, 60, 25, _("Miles"));
          vis_miles->tooltip(_("Specify visiblity in miles"));
          vis_miles->type(102);
          vis_miles->down_box(FL_ROUND_DOWN_BOX);
          vis_miles->labelsize(12);
        } // Fl_Round_Button* vis_miles
        o->end();
      } // Fl_Group* o
      { view_offset = new Fl_Input(490, 265, 120, 25, _("View Offset:"));
        view_offset->labelsize(12);
        view_offset->textsize(12);
      } // Fl_Input* view_offset
      { bpp = new Fl_Choice(490, 295, 120, 25, _("bpp:"));
        bpp->tooltip(_("Color depth (bits per pixel)"));
        bpp->down_box(FL_BORDER_BOX);
        bpp->labelsize(12);
        bpp->textsize(12);
        bpp->menu(menu_bpp);
      } // Fl_Choice* bpp
      { fov = new Fl_Value_Input(490, 325, 120, 25, _("FOV:"));
        fov->tooltip(_("Field of View angle"));
        fov->labelsize(12);
        fov->minimum(1);
        fov->maximum(360);
        fov->value(60);
        fov->textsize(12);
      } // Fl_Value_Input* fov
      { texture_filtering = new Fl_Choice(490, 355, 120, 25, _("Texture filtering:"));
        texture_filtering->tooltip(_("Set the maximum degree of anisotropy in texture filtering"));
        texture_filtering->down_box(FL_BORDER_BOX);
        texture_filtering->labelsize(12);
        texture_filtering->textsize(12);
      } // Fl_Choice* texture_filtering
      { Fl_Box* o = new Fl_Box(615, 415, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[5]->end();
    } // Fl_Group* page[5]
    { page[6] = new Fl_Group(150, 0, 490, 440, _("Time"));
      page[6]->labelfont(1);
      page[6]->labelsize(16);
      page[6]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[6]->hide();
      { time_match_real = new Fl_Round_Button(175, 35, 220, 25, _("Time match real"));
        time_match_real->tooltip(_("Synchronize simulation time with real time"));
        time_match_real->type(102);
        time_match_real->down_box(FL_ROUND_DOWN_BOX);
        time_match_real->value(1);
        time_match_real->labelsize(12);
        time_match_real->callback((Fl_Callback*)cb_time_match_real);
      } // Fl_Round_Button* time_match_real
      { time_match_local = new Fl_Round_Button(175, 65, 220, 25, _("Time match local"));
        time_match_local->tooltip(_("Synchronize simulation time with local time"));
        time_match_local->type(102);
        time_match_local->down_box(FL_ROUND_DOWN_BOX);
        time_match_local->labelsize(12);
        time_match_local->callback((Fl_Callback*)cb_time_match_local);
      } // Fl_Round_Button* time_match_local
      { start_date_sys = new Fl_Round_Button(175, 95, 220, 25, _("Start date sys"));
        start_date_sys->type(102);
        start_date_sys->down_box(FL_ROUND_DOWN_BOX);
        start_date_sys->labelsize(12);
        start_date_sys->callback((Fl_Callback*)cb_start_date_sys);
      } // Fl_Round_Button* start_date_sys
      { start_date_gmt = new Fl_Round_Button(175, 125, 220, 25, _("Start date gmt"));
        start_date_gmt->type(102);
        start_date_gmt->down_box(FL_ROUND_DOWN_BOX);
        start_date_gmt->labelsize(12);
        start_date_gmt->callback((Fl_Callback*)cb_start_date_gmt);
      } // Fl_Round_Button* start_date_gmt
      { start_date_lat = new Fl_Round_Button(175, 155, 220, 25, _("Start date lat"));
        start_date_lat->type(102);
        start_date_lat->down_box(FL_ROUND_DOWN_BOX);
        start_date_lat->labelsize(12);
        start_date_lat->callback((Fl_Callback*)cb_start_date_lat);
      } // Fl_Round_Button* start_date_lat
      { time_offset_value = new Fl_Input(400, 35, 140, 25);
        time_offset_value->tooltip(_("Offset (+/-) from real time"));
        time_offset_value->labeltype(FL_NO_LABEL);
        time_offset_value->labelsize(12);
        time_offset_value->textsize(12);
        time_offset_value->when(3);
      } // Fl_Input* time_offset_value
      { start_date_sys_value = new Fl_Input(400, 95, 140, 25);
        start_date_sys_value->labeltype(FL_NO_LABEL);
        start_date_sys_value->labelsize(12);
        start_date_sys_value->textsize(12);
        start_date_sys_value->callback((Fl_Callback*)cb_start_date_sys_value);
        start_date_sys_value->when(3);
      } // Fl_Input* start_date_sys_value
      { start_date_gmt_value = new Fl_Input(400, 125, 140, 25);
        start_date_gmt_value->labeltype(FL_NO_LABEL);
        start_date_gmt_value->labelsize(12);
        start_date_gmt_value->textsize(12);
        start_date_gmt_value->callback((Fl_Callback*)cb_start_date_gmt_value);
        start_date_gmt_value->when(3);
      } // Fl_Input* start_date_gmt_value
      { start_date_lat_value = new Fl_Input(400, 155, 140, 25);
        start_date_lat_value->labeltype(FL_NO_LABEL);
        start_date_lat_value->labelsize(12);
        start_date_lat_value->textsize(12);
        start_date_lat_value->callback((Fl_Callback*)cb_start_date_lat_value);
        start_date_lat_value->when(3);
      } // Fl_Input* start_date_lat_value
      { time_of_day = new Fl_Round_Button(175, 185, 220, 25, _("Time of day"));
        time_of_day->type(102);
        time_of_day->down_box(FL_ROUND_DOWN_BOX);
        time_of_day->labelsize(12);
        time_of_day->callback((Fl_Callback*)cb_time_of_day);
      } // Fl_Round_Button* time_of_day
      { time_of_day_value = new Fl_Choice(400, 185, 140, 25, _("choice:"));
        time_of_day_value->down_box(FL_BORDER_BOX);
        time_of_day_value->labeltype(FL_NO_LABEL);
        time_of_day_value->labelsize(12);
        time_of_day_value->textsize(12);
      } // Fl_Choice* time_of_day_value
      { Fl_Box* o = new Fl_Box(615, 415, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[6]->end();
    } // Fl_Group* page[6]
    { page[7] = new Fl_Group(150, 0, 490, 440, _("Network"));
      page[7]->labelfont(1);
      page[7]->labelsize(16);
      page[7]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[7]->hide();
      { httpd = new Fl_Check_Button(175, 35, 130, 25, _("httpd"));
        httpd->tooltip(_("Enable HTTP server"));
        httpd->down_box(FL_DOWN_BOX);
        httpd->labelsize(12);
        httpd->callback((Fl_Callback*)cb_httpd);
      } // Fl_Check_Button* httpd
      { httpd_port = new Fl_Value_Input(305, 35, 100, 25);
        httpd_port->tooltip(_("HTTP server port"));
        httpd_port->labeltype(FL_NO_LABEL);
        httpd_port->labelsize(12);
        httpd_port->minimum(1025);
        httpd_port->maximum(65535);
        httpd_port->value(5500);
        httpd_port->textsize(12);
        httpd_port->when(3);
        httpd_port->deactivate();
      } // Fl_Value_Input* httpd_port
      { props = new Fl_Check_Button(175, 65, 130, 25, _("props"));
        props->tooltip(_("Enable property server"));
        props->down_box(FL_DOWN_BOX);
        props->labelsize(12);
        props->callback((Fl_Callback*)cb_props);
      } // Fl_Check_Button* props
      { props_port = new Fl_Value_Input(305, 65, 100, 25);
        props_port->tooltip(_("Property server port"));
        props_port->labeltype(FL_NO_LABEL);
        props_port->labelsize(12);
        props_port->minimum(1025);
        props_port->maximum(65535);
        props_port->value(5501);
        props_port->textsize(12);
        props_port->deactivate();
      } // Fl_Value_Input* props_port
      { jpg_httpd = new Fl_Check_Button(175, 95, 130, 25, _("jpg-httpd"));
        jpg_httpd->tooltip(_("Enable screen shot HTTP server"));
        jpg_httpd->down_box(FL_DOWN_BOX);
        jpg_httpd->labelsize(12);
        jpg_httpd->callback((Fl_Callback*)cb_jpg_httpd);
      } // Fl_Check_Button* jpg_httpd
      { jpg_httpd_port = new Fl_Value_Input(305, 95, 100, 25);
        jpg_httpd_port->tooltip(_("Screen shot HTTP server port"));
        jpg_httpd_port->labeltype(FL_NO_LABEL);
        jpg_httpd_port->labelsize(12);
        jpg_httpd_port->minimum(1025);
        jpg_httpd_port->maximum(65535);
        jpg_httpd_port->value(5502);
        jpg_httpd_port->textsize(12);
        jpg_httpd_port->deactivate();
      } // Fl_Value_Input* jpg_httpd_port
      { Fl_Group* o = new Fl_Group(155, 135, 480, 120, _("Multiplayer Options"));
        o->box(FL_ENGRAVED_FRAME);
        o->labelfont(1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        { callsign = new Fl_Input(240, 160, 135, 25, _("Callsign:"));
          callsign->labelsize(12);
          callsign->textsize(12);
        } // Fl_Input* callsign
        { multiplay1 = new Fl_Input(240, 190, 295, 25, _("Multiplay 1:"));
          multiplay1->tooltip(_("in|out,hz,address,port"));
          multiplay1->labelsize(12);
          multiplay1->textsize(12);
        } // Fl_Input* multiplay1
        { multiplay2 = new Fl_Input(240, 220, 295, 25, _("Multiplay 2:"));
          multiplay2->labelsize(12);
          multiplay2->textsize(12);
        } // Fl_Input* multiplay2
        { Fl_Box* o = new Fl_Box(590, 245, 40, 10);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { proxy = new Fl_Input(240, 275, 230, 25, _("Proxy:"));
        proxy->labelsize(12);
        proxy->textsize(12);
      } // Fl_Input* proxy
      { Fl_Box* o = new Fl_Box(610, 415, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[7]->end();
    } // Fl_Group* page[7]
    { page[8] = new Fl_Group(150, 0, 490, 435, _("Input/Output"));
      page[8]->labelfont(1);
      page[8]->labelsize(16);
      page[8]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { io_list = new Fl_Browser(155, 40, 480, 125);
        io_list->type(2);
        io_list->labeltype(FL_NO_LABEL);
        io_list->labelsize(12);
        io_list->textsize(12);
        io_list->callback((Fl_Callback*)cb_io_list);
        Fl_Group::current()->resizable(io_list);
      } // Fl_Browser* io_list
      { Fl_Group* o = new Fl_Group(150, 170, 485, 265);
        { io_new = new Fl_Button(500, 185, 75, 25, _("New"));
          io_new->labelsize(12);
          io_new->callback((Fl_Callback*)cb_io_new);
        } // Fl_Button* io_new
        { io_delete = new Fl_Button(580, 185, 55, 25, _("Delete"));
          io_delete->labelsize(12);
          io_delete->callback((Fl_Callback*)cb_io_delete);
          io_delete->deactivate();
        } // Fl_Button* io_delete
        { io_protocol = new Fl_Choice(260, 185, 125, 25, _("Protocol:"));
          io_protocol->down_box(FL_BORDER_BOX);
          io_protocol->labelsize(12);
          io_protocol->textsize(12);
          io_protocol->callback((Fl_Callback*)cb_io_protocol);
          io_protocol->menu(menu_io_protocol);
        } // Fl_Choice* io_protocol
        { io_medium = new Fl_Choice(260, 215, 125, 25, _("Medium:"));
          io_medium->down_box(FL_BORDER_BOX);
          io_medium->labelsize(12);
          io_medium->textsize(12);
          io_medium->callback((Fl_Callback*)cb_io_medium);
          io_medium->when(FL_WHEN_RELEASE_ALWAYS);
          io_medium->deactivate();
          io_medium->menu(menu_io_medium);
        } // Fl_Choice* io_medium
        { io_dir = new Fl_Choice(260, 245, 125, 25, _("Direction:"));
          io_dir->down_box(FL_BORDER_BOX);
          io_dir->labelsize(12);
          io_dir->textsize(12);
          io_dir->callback((Fl_Callback*)cb_io_dir);
          io_dir->deactivate();
          io_dir->menu(menu_io_dir);
        } // Fl_Choice* io_dir
        { io_hz = new Fl_Value_Input(260, 275, 125, 25, _("Hz:"));
          io_hz->labelsize(12);
          io_hz->minimum(1);
          io_hz->maximum(1000);
          io_hz->value(5);
          io_hz->textsize(12);
          io_hz->callback((Fl_Callback*)cb_io_hz);
          io_hz->deactivate();
        } // Fl_Value_Input* io_hz
        { file_group = new Fl_Group(165, 305, 250, 25);
          file_group->hide();
          { io_file_name = new Fl_Input(260, 305, 125, 25, _("File:"));
            io_file_name->labelsize(12);
            io_file_name->textsize(12);
            io_file_name->callback((Fl_Callback*)cb_io_file_name);
            io_file_name->when(FL_WHEN_CHANGED);
          } // Fl_Input* io_file_name
          { Fl_Button* o = new Fl_Button(390, 305, 25, 25, _("..."));
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_2);
          } // Fl_Button* o
          file_group->end();
        } // Fl_Group* file_group
        { serial_group = new Fl_Group(165, 305, 250, 55);
          serial_group->hide();
          { serial_port = new Fl_Input(260, 305, 125, 25, _("Port:"));
            serial_port->labelsize(12);
            serial_port->textsize(12);
            serial_port->callback((Fl_Callback*)cb_serial_port);
            serial_port->when(FL_WHEN_CHANGED);
          } // Fl_Input* serial_port
          { serial_baud_rate = new Fl_Input(260, 335, 125, 25, _("Baud Rate:"));
            serial_baud_rate->type(2);
            serial_baud_rate->labelsize(12);
            serial_baud_rate->textsize(12);
            serial_baud_rate->callback((Fl_Callback*)cb_serial_baud_rate);
            serial_baud_rate->when(FL_WHEN_CHANGED);
          } // Fl_Input* serial_baud_rate
          serial_group->end();
        } // Fl_Group* serial_group
        { socket_group = new Fl_Group(165, 305, 250, 85);
          socket_group->hide();
          { socket_host = new Fl_Input(260, 305, 125, 25, _("Hostname:"));
            socket_host->labelsize(12);
            socket_host->textsize(12);
            socket_host->callback((Fl_Callback*)cb_socket_host);
            socket_host->when(FL_WHEN_CHANGED);
          } // Fl_Input* socket_host
          { socket_port = new Fl_Value_Input(260, 335, 125, 25, _("Port:"));
            socket_port->labelsize(12);
            socket_port->minimum(1024);
            socket_port->maximum(65535);
            socket_port->step(1);
            socket_port->value(5500);
            socket_port->textsize(12);
            socket_port->callback((Fl_Callback*)cb_socket_port);
          } // Fl_Value_Input* socket_port
          { socket_tcp = new Fl_Round_Button(260, 365, 55, 25, _("TCP"));
            socket_tcp->type(102);
            socket_tcp->down_box(FL_ROUND_DOWN_BOX);
            socket_tcp->value(1);
            socket_tcp->labelsize(12);
            socket_tcp->callback((Fl_Callback*)cb_socket_tcp);
          } // Fl_Round_Button* socket_tcp
          { socket_udp = new Fl_Round_Button(330, 365, 85, 25, _("UDP"));
            socket_udp->type(102);
            socket_udp->down_box(FL_ROUND_DOWN_BOX);
            socket_udp->labelsize(12);
            socket_udp->callback((Fl_Callback*)cb_socket_udp);
          } // Fl_Round_Button* socket_udp
          socket_group->end();
        } // Fl_Group* socket_group
        { generic_group = new Fl_Group(165, 365, 250, 25);
          generic_group->hide();
          { io_generic_file = new Fl_Input(260, 365, 125, 25, _("Generic:"));
            io_generic_file->labelsize(12);
            io_generic_file->textsize(12);
            io_generic_file->callback((Fl_Callback*)cb_io_generic_file);
          } // Fl_Input* io_generic_file
          { Fl_Button* o = new Fl_Button(390, 365, 25, 25, _("..."));
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_3);
          } // Fl_Button* o
          generic_group->end();
        } // Fl_Group* generic_group
        { Fl_Box* o = new Fl_Box(460, 410, 25, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      page[8]->end();
    } // Fl_Group* page[8]
    { page[9] = new Fl_Group(150, 0, 490, 435, _("Avionics"));
      page[9]->labelfont(1);
      page[9]->labelsize(16);
      page[9]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[9]->hide();
      { nav1 = new Fl_Input(205, 40, 150, 25, _("Nav1:"));
        nav1->tooltip(_("Set the NAV1 radio frequency, optionally preceded by a radial"));
        nav1->labelsize(12);
        nav1->textsize(12);
      } // Fl_Input* nav1
      { nav2 = new Fl_Input(205, 70, 150, 25, _("Nav2:"));
        nav2->labelsize(12);
        nav2->textsize(12);
      } // Fl_Input* nav2
      { adf = new Fl_Input(205, 100, 150, 25, _("ADF:"));
        adf->labelsize(12);
        adf->textsize(12);
      } // Fl_Input* adf
      { dme_group = new Fl_Group(205, 170, 165, 85);
        dme_group->labelsize(12);
        dme_group->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        dme_group->deactivate();
        { dme_nav1 = new Fl_Round_Button(215, 170, 85, 25, _("Nav1"));
          dme_nav1->type(102);
          dme_nav1->down_box(FL_ROUND_DOWN_BOX);
          dme_nav1->labelsize(12);
          dme_nav1->callback((Fl_Callback*)cb_dme_nav1);
        } // Fl_Round_Button* dme_nav1
        { dme_nav2 = new Fl_Round_Button(215, 195, 85, 25, _("Nav2"));
          dme_nav2->type(102);
          dme_nav2->down_box(FL_ROUND_DOWN_BOX);
          dme_nav2->labelsize(12);
          dme_nav2->callback((Fl_Callback*)cb_dme_nav2);
        } // Fl_Round_Button* dme_nav2
        { dme_int = new Fl_Round_Button(215, 220, 70, 25, _("Internal"));
          dme_int->type(102);
          dme_int->down_box(FL_ROUND_DOWN_BOX);
          dme_int->labelsize(12);
          dme_int->callback((Fl_Callback*)cb_dme_int);
        } // Fl_Round_Button* dme_int
        { dme_int_freq = new Fl_Input(285, 220, 70, 25);
          dme_int_freq->labelsize(12);
          dme_int_freq->textsize(12);
          dme_int_freq->deactivate();
        } // Fl_Input* dme_int_freq
        dme_group->end();
      } // Fl_Group* dme_group
      { dme = new Fl_Check_Button(205, 140, 20, 25, _("DME:"));
        dme->down_box(FL_DOWN_BOX);
        dme->labelsize(12);
        dme->callback((Fl_Callback*)cb_dme);
        dme->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Check_Button* dme
      { Fl_Box* o = new Fl_Box(615, 410, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[9]->end();
    } // Fl_Group* page[9]
    { page[10] = new Fl_Group(150, 0, 550, 430, _("Properties"));
      page[10]->labelfont(1);
      page[10]->labelsize(16);
      page[10]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[10]->hide();
      { Fl_Box* o = new Fl_Box(220, 40, 275, 125);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { prop_list = new Fl_Browser(155, 40, 480, 125);
        prop_list->type(2);
        prop_list->labeltype(FL_NO_LABEL);
        prop_list->labelsize(12);
        prop_list->textsize(12);
        prop_list->callback((Fl_Callback*)cb_prop_list);
      } // Fl_Browser* prop_list
      { Fl_Group* o = new Fl_Group(220, 185, 415, 25);
        { prop_delete = new Fl_Button(580, 185, 55, 25, _("Delete"));
          prop_delete->labelsize(12);
          prop_delete->callback((Fl_Callback*)cb_prop_delete);
          prop_delete->deactivate();
        } // Fl_Button* prop_delete
        { prop_input = new Fl_Input(220, 185, 275, 25, _("Property:"));
          prop_input->tooltip(_("prop=value"));
          prop_input->labelsize(12);
          prop_input->textsize(12);
          prop_input->callback((Fl_Callback*)cb_prop_input);
          prop_input->when(FL_WHEN_CHANGED);
          prop_input->deactivate();
          Fl_Group::current()->resizable(prop_input);
        } // Fl_Input* prop_input
        { Fl_Button* o = new Fl_Button(500, 185, 75, 25, _("New"));
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_New);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      page[10]->end();
    } // Fl_Group* page[10]
    { page[11] = new Fl_Group(150, 0, 490, 430, _("Debugging"));
      page[11]->labelfont(1);
      page[11]->labelsize(16);
      page[11]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[11]->hide();
      { Fl_Group* o = new Fl_Group(160, 45, 475, 35);
        { log_level = new Fl_Choice(260, 45, 130, 25, _("Log Level:"));
          log_level->down_box(FL_BORDER_BOX);
          log_level->labelsize(12);
          log_level->textsize(12);
        } // Fl_Choice* log_level
        { Fl_Box* o = new Fl_Box(390, 70, 125, 10);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(160, 105, 475, 275);
        { Fl_Group* o = new Fl_Group(160, 105, 475, 125);
          { Fl_Box* o = new Fl_Box(210, 105, 295, 80);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          { trace_read_list = new Fl_Browser(160, 105, 475, 80, _("Trace Read Properties"));
            trace_read_list->type(2);
            trace_read_list->labelfont(1);
            trace_read_list->textsize(12);
            trace_read_list->callback((Fl_Callback*)cb_trace_read_list);
            trace_read_list->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Browser* trace_read_list
          { Fl_Group* o = new Fl_Group(200, 195, 435, 25);
            { trace_read_input = new Fl_Input(200, 195, 305, 25, _("Value:"));
              trace_read_input->labelsize(12);
              trace_read_input->textsize(12);
              trace_read_input->callback((Fl_Callback*)cb_trace_read_input);
              trace_read_input->when(FL_WHEN_CHANGED);
              trace_read_input->deactivate();
              Fl_Group::current()->resizable(trace_read_input);
            } // Fl_Input* trace_read_input
            { Fl_Button* o = new Fl_Button(510, 195, 70, 25, _("New"));
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_New1);
            } // Fl_Button* o
            { trace_read_delete = new Fl_Button(585, 195, 50, 25, _("Delete"));
              trace_read_delete->labelsize(12);
              trace_read_delete->callback((Fl_Callback*)cb_trace_read_delete);
              trace_read_delete->deactivate();
            } // Fl_Button* trace_read_delete
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(160, 230, 475, 150);
          { Fl_Box* o = new Fl_Box(200, 265, 305, 80);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          { trace_write_list = new Fl_Browser(160, 265, 475, 80, _("Trace Write Properties"));
            trace_write_list->type(2);
            trace_write_list->labelfont(1);
            trace_write_list->textsize(12);
            trace_write_list->callback((Fl_Callback*)cb_trace_write_list);
            trace_write_list->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Browser* trace_write_list
          { Fl_Group* o = new Fl_Group(200, 355, 435, 25);
            { trace_write_input = new Fl_Input(200, 355, 305, 25, _("Value:"));
              trace_write_input->labelsize(12);
              trace_write_input->textsize(12);
              trace_write_input->callback((Fl_Callback*)cb_trace_write_input);
              trace_write_input->when(FL_WHEN_CHANGED);
              trace_write_input->deactivate();
              Fl_Group::current()->resizable(trace_write_input);
            } // Fl_Input* trace_write_input
            { Fl_Button* o = new Fl_Button(510, 355, 70, 25, _("New"));
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_New2);
            } // Fl_Button* o
            { trace_write_delete = new Fl_Button(585, 355, 50, 25, _("Delete"));
              trace_write_delete->labelsize(12);
              trace_write_delete->callback((Fl_Callback*)cb_trace_write_delete);
              trace_write_delete->deactivate();
            } // Fl_Button* trace_write_delete
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      page[11]->end();
    } // Fl_Group* page[11]
    { page[12] = new Fl_Group(150, 0, 490, 430, _("Environment"));
      page[12]->labelfont(1);
      page[12]->labelsize(16);
      page[12]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[12]->hide();
      { Fl_Box* o = new Fl_Box(220, 40, 275, 125);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { env_list = new Fl_Browser(155, 40, 480, 125);
        env_list->type(2);
        env_list->labelsize(12);
        env_list->textsize(12);
        env_list->callback((Fl_Callback*)cb_env_list);
      } // Fl_Browser* env_list
      { Fl_Button* o = new Fl_Button(500, 185, 75, 25, _("New"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_New3);
      } // Fl_Button* o
      { env_delete = new Fl_Button(580, 185, 55, 25, _("Delete"));
        env_delete->labelsize(12);
        env_delete->callback((Fl_Callback*)cb_env_delete);
        env_delete->deactivate();
      } // Fl_Button* env_delete
      { env_input = new Fl_Input(220, 185, 275, 25, _("Value:"));
        env_input->labelsize(12);
        env_input->textsize(12);
        env_input->callback((Fl_Callback*)cb_env_input);
        env_input->when(FL_WHEN_CHANGED);
        env_input->deactivate();
      } // Fl_Input* env_input
      page[12]->end();
    } // Fl_Group* page[12]
    { page[13] = new Fl_Group(150, 0, 490, 440, _("Weather"));
      page[13]->labelfont(1);
      page[13]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[13]->hide();
      { Fl_Group* o = new Fl_Group(155, 35, 230, 280);
        o->box(FL_ENGRAVED_FRAME);
        o->labeltype(FL_NO_LABEL);
        o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
        { wind_dial = new Fl_Heading_Dial(205, 60, 130, 130, _("Wind Direction"));
          wind_dial->type(1);
          wind_dial->box(FL_OVAL_BOX);
          wind_dial->color(FL_BACKGROUND_COLOR);
          wind_dial->selection_color(FL_INACTIVE_COLOR);
          wind_dial->labeltype(FL_NORMAL_LABEL);
          wind_dial->labelfont(0);
          wind_dial->labelsize(12);
          wind_dial->labelcolor(FL_FOREGROUND_COLOR);
          wind_dial->callback((Fl_Callback*)cb_wind_dial);
          wind_dial->align(Fl_Align(FL_ALIGN_TOP));
          wind_dial->when(FL_WHEN_CHANGED);
        } // Fl_Heading_Dial* wind_dial
        { wind_hdg = new Fl_Value_Input(235, 200, 80, 25, _("Heading:"));
          wind_hdg->tooltip(_("Direction wind is coming from."));
          wind_hdg->labelsize(12);
          wind_hdg->maximum(360);
          wind_hdg->step(0.1);
          wind_hdg->textsize(12);
          wind_hdg->callback((Fl_Callback*)cb_wind_hdg);
        } // Fl_Value_Input* wind_hdg
        { wind_speed = new Fl_Value_Input(235, 245, 80, 25, _("Speed (kts):"));
          wind_speed->tooltip(_("Wind speed (kts)"));
          wind_speed->labelsize(12);
          wind_speed->maximum(500);
          wind_speed->step(0.1);
          wind_speed->textsize(12);
        } // Fl_Value_Input* wind_speed
        { random_wind = new Fl_Check_Button(235, 280, 105, 25, _("Random Winds"));
          random_wind->down_box(FL_DOWN_BOX);
          random_wind->labelsize(12);
          random_wind->callback((Fl_Callback*)cb_random_wind);
        } // Fl_Check_Button* random_wind
        o->end();
      } // Fl_Group* o
      { turbulence = new Fl_Value_Slider(430, 35, 25, 275, _("Turbulence"));
        turbulence->tooltip(_("calm (0.0) to severe (1.0)"));
        turbulence->labelsize(12);
        turbulence->minimum(1);
        turbulence->maximum(0);
      } // Fl_Value_Slider* turbulence
      { ceiling = new Fl_Input(235, 335, 80, 25, _("Ceiling:"));
        ceiling->tooltip(_("FT_ASL[:THICKNESS_FT]"));
        ceiling->labelsize(12);
        ceiling->textsize(12);
      } // Fl_Input* ceiling
      { fetch_real_weather = new Fl_Check_Button(235, 370, 155, 25, _("Fetch real weather"));
        fetch_real_weather->down_box(FL_DOWN_BOX);
        fetch_real_weather->labelsize(12);
      } // Fl_Check_Button* fetch_real_weather
      { Fl_Box* o = new Fl_Box(615, 415, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[13]->end();
    } // Fl_Group* page[13]
    { page[14] = new Fl_Group(150, 0, 490, 440, _("Clouds"));
      page[14]->labelfont(1);
      page[14]->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      page[14]->hide();
      { cloud_layer_ = new Fl_Choice(255, 80, 120, 25, _("Layer:"));
        cloud_layer_->down_box(FL_BORDER_BOX);
        cloud_layer_->labelsize(12);
        cloud_layer_->textsize(12);
        cloud_layer_->callback((Fl_Callback*)cb_cloud_layer_);
        cloud_layer_->menu(menu_cloud_layer_);
      } // Fl_Choice* cloud_layer_
      { cloud_elevation_ = new Fl_Value_Input(255, 110, 120, 25, _("Elevation(ft):"));
        cloud_elevation_->labelsize(12);
        cloud_elevation_->maximum(100000);
        cloud_elevation_->step(100);
        cloud_elevation_->textsize(12);
        cloud_elevation_->callback((Fl_Callback*)cb_cloud_elevation_);
      } // Fl_Value_Input* cloud_elevation_
      { cloud_thickness_ = new Fl_Value_Input(255, 140, 120, 25, _("Thickness (ft):"));
        cloud_thickness_->labelsize(12);
        cloud_thickness_->maximum(100000);
        cloud_thickness_->step(10);
        cloud_thickness_->textsize(12);
        cloud_thickness_->callback((Fl_Callback*)cb_cloud_thickness_);
      } // Fl_Value_Input* cloud_thickness_
      { cloud_coverage_ = new Fl_Choice(255, 170, 120, 25, _("Coverage:"));
        cloud_coverage_->down_box(FL_BORDER_BOX);
        cloud_coverage_->labelsize(12);
        cloud_coverage_->textsize(12);
        cloud_coverage_->callback((Fl_Callback*)cb_cloud_coverage_);
      } // Fl_Choice* cloud_coverage_
      { cloud_span_ = new Fl_Value_Input(255, 200, 120, 25, _("Span (m):"));
        cloud_span_->labelsize(12);
        cloud_span_->maximum(100000);
        cloud_span_->step(1);
        cloud_span_->textsize(12);
        cloud_span_->callback((Fl_Callback*)cb_cloud_span_);
        cloud_span_->deactivate();
      } // Fl_Value_Input* cloud_span_
      { cloud_transition_ = new Fl_Value_Input(255, 230, 120, 25, _("Transition (ft):"));
        cloud_transition_->labelsize(12);
        cloud_transition_->maximum(100000);
        cloud_transition_->step(1);
        cloud_transition_->textsize(12);
        cloud_transition_->callback((Fl_Callback*)cb_cloud_transition_);
        cloud_transition_->deactivate();
      } // Fl_Value_Input* cloud_transition_
      { Fl_Box* o = new Fl_Box(615, 415, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      page[14]->end();
    } // Fl_Group* page[14]
    init();
    main_window->set_modal();
    main_window->end();
  } // Fl_Double_Window* main_window
}
