// generated by Fast Light User Interface Designer (fluid) version 1.0103

#include "UserInterface.h"
#if defined(_MSC_VER)
#pragma warning(disable: 4786)
#define snprintf _snprintf
#endif
#include <string.h>
#include <FL/Fl_File_Chooser.h>

inline void UserInterface::cb_Save_i(Fl_Menu_*, void*) {
  save_settings_cb();
}
void UserInterface::cb_Save(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

inline void UserInterface::cb_Quit_i(Fl_Menu_*, void*) {
  main_window->hide();
}
void UserInterface::cb_Quit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

Fl_Menu_Item UserInterface::menu_[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 12, 56},
 {"&Save", 0x40073,  (Fl_Callback*)UserInterface::cb_Save, 0, 128, 0, 0, 12, 56},
 {"&Quit", 0x40071,  (Fl_Callback*)UserInterface::cb_Quit, 0, 0, 0, 0, 12, 56},
 {0},
 {"&Settings", 0,  0, 0, 64, 0, 0, 12, 56},
 {"Output Window", 0,  0, 0, 2, 0, 0, 12, 56},
 {0},
 {"&Help", 0,  0, 0, 64, 0, 0, 12, 56},
 {"&About...", 0,  0, 0, 0, 0, 0, 12, 56},
 {0},
 {0}
};
Fl_Menu_Item* UserInterface::view_output_window = UserInterface::menu_ + 5;

inline void UserInterface::cb_page_list_i(Fl_Browser* o, void*) {
  if (o->value() > 0)
  show_page(o->value()-1);
}
void UserInterface::cb_page_list(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_page_list_i(o,v);
}

inline void UserInterface::cb_run_i(Fl_Button*, void*) {
  run_fgfs();
}
void UserInterface::cb_run(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_run_i(o,v);
}

inline void UserInterface::cb_Save1_i(Fl_Button*, void*) {
  save_settings_cb();
}
void UserInterface::cb_Save1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

inline void UserInterface::cb_Reset_i(Fl_Button*, void*) {
  default_settings_cb();
}
void UserInterface::cb_Reset(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

inline void UserInterface::cb__i(Fl_Button*, void*) {
  char* p = fl_file_chooser("Select executable", 0, fg_exe->value(), 0);
if (p != 0) {
  fg_exe->value( p );
  run->activate();
};
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

inline void UserInterface::cb_1_i(Fl_Button*, void*) {
  char* p = fl_dir_chooser( "Select FG_ROOT directory", fg_root->value(), 0);
if (p != 0) {
  fg_root->value(p);
  char buf[FL_PATH_MAX];
  snprintf( buf, sizeof(buf), "%s/Scenery", p);
  if (fl_filename_isdir(buf)) {
    fg_scenery->value(buf);
    airport_update->activate();
    aircraft_update->activate();
  }
};
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

inline void UserInterface::cb_2_i(Fl_Button*, void*) {
  char* p = fl_dir_chooser("Select FG_SCENERY directory", fg_scenery->value(), 0);
if (p != 0) {
  fg_scenery->value(p);
  airport_update->activate();
  aircraft_update->activate();
};
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

inline void UserInterface::cb_airport_i(Fl_Choice*, void*) {
  update_runways();
}
void UserInterface::cb_airport(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_airport_i(o,v);
}

inline void UserInterface::cb_airport_update_i(Fl_Button*, void*) {
  update_airports_cb();
}
void UserInterface::cb_airport_update(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_airport_update_i(o,v);
}

inline void UserInterface::cb_aircraft_update_i(Fl_Button*, void*) {
  update_aircraft();
}
void UserInterface::cb_aircraft_update(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_aircraft_update_i(o,v);
}

Fl_Menu_Item UserInterface::menu_control[] = {
 {"joystick", 0,  0, 0, 0, 0, 0, 12, 56},
 {"keyboard", 0,  0, 0, 0, 0, 0, 12, 56},
 {"mouse", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

inline void UserInterface::cb_3_i(Fl_Button*, void*) {
  char* p = fl_file_chooser("Select browser", 0, browser->value(), 0);
if (p != 0)
  browser->value( p );
}
void UserInterface::cb_3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_3_i(o,v);
}

inline void UserInterface::cb_hud_i(Fl_Check_Button* o, void*) {
  if (o->value())
  antialias_hud->activate();
else
  antialias_hud->deactivate();
}
void UserInterface::cb_hud(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_hud_i(o,v);
}

inline void UserInterface::cb_fdm_i(Fl_Choice* o, void*) {
  if (strcmp(o->text(), "jsb") == 0){
  notrim->activate();
} else {
  notrim->deactivate();
};
}
void UserInterface::cb_fdm(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_fdm_i(o,v);
}

Fl_Menu_Item UserInterface::menu_fdm[] = {
 {"ada", 0,  0, 0, 0, 0, 0, 12, 56},
 {"balloon", 0,  0, 0, 0, 0, 0, 12, 56},
 {"external", 0,  0, 0, 0, 0, 0, 12, 56},
 {"jsb", 0,  0, 0, 0, 0, 0, 12, 56},
 {"larcsim", 0,  0, 0, 0, 0, 0, 12, 56},
 {"magic", 0,  0, 0, 0, 0, 0, 12, 56},
 {"network", 0,  0, 0, 0, 0, 0, 12, 56},
 {"null", 0,  0, 0, 0, 0, 0, 12, 56},
 {"ufo", 0,  0, 0, 0, 0, 0, 12, 56},
 {"yasim", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

Fl_Menu_Item UserInterface::menu_bpp[] = {
 {"16", 0,  0, 0, 0, 0, 0, 12, 56},
 {"24", 0,  0, 0, 0, 0, 0, 12, 56},
 {"32", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

inline void UserInterface::cb_start_date_sys_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  start_date_sys_value->take_focus();
};
}
void UserInterface::cb_start_date_sys(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_start_date_sys_i(o,v);
}

inline void UserInterface::cb_start_date_gmt_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  start_date_gmt_value->take_focus();
};
}
void UserInterface::cb_start_date_gmt(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_start_date_gmt_i(o,v);
}

inline void UserInterface::cb_start_date_lat_i(Fl_Round_Button* o, void*) {
  if (o->value()) {
  start_date_lat_value->take_focus();
};
}
void UserInterface::cb_start_date_lat(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_start_date_lat_i(o,v);
}

inline void UserInterface::cb_time_offset_value_i(Fl_Input*, void*) {
  time_match_real->setonly();
}
void UserInterface::cb_time_offset_value(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_time_offset_value_i(o,v);
}

inline void UserInterface::cb_start_date_sys_value_i(Fl_Input*, void*) {
  start_date_sys->setonly();
}
void UserInterface::cb_start_date_sys_value(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_start_date_sys_value_i(o,v);
}

inline void UserInterface::cb_start_date_gmt_value_i(Fl_Input*, void*) {
  start_date_gmt->setonly();
}
void UserInterface::cb_start_date_gmt_value(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_start_date_gmt_value_i(o,v);
}

inline void UserInterface::cb_start_date_lat_value_i(Fl_Input*, void*) {
  start_date_lat->setonly();
}
void UserInterface::cb_start_date_lat_value(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_start_date_lat_value_i(o,v);
}

inline void UserInterface::cb_httpd_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  httpd_port->take_focus();
};
}
void UserInterface::cb_httpd(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_httpd_i(o,v);
}

inline void UserInterface::cb_httpd_port_i(Fl_Value_Input*, void*) {
  httpd->set();
}
void UserInterface::cb_httpd_port(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_httpd_port_i(o,v);
}

inline void UserInterface::cb_props_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  props_port->take_focus();
};
}
void UserInterface::cb_props(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_props_i(o,v);
}

inline void UserInterface::cb_props_port_i(Fl_Value_Input*, void*) {
  props->set();
}
void UserInterface::cb_props_port(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_props_port_i(o,v);
}

inline void UserInterface::cb_jpg_httpd_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  jpg_httpd_port->take_focus();
};
}
void UserInterface::cb_jpg_httpd(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_jpg_httpd_i(o,v);
}

inline void UserInterface::cb_jpg_httpd_port_i(Fl_Value_Input*, void*) {
  jpg_httpd->set();
}
void UserInterface::cb_jpg_httpd_port(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_jpg_httpd_port_i(o,v);
}

inline void UserInterface::cb_network_olk_i(Fl_Check_Button* o, void*) {
  if (o->value()) {
  net_hud->activate();
  net_id->activate();
} else {
  net_hud->deactivate();
  net_id->deactivate();
};
}
void UserInterface::cb_network_olk(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_network_olk_i(o,v);
}

inline void UserInterface::cb_io_list_i(Fl_Browser* o, void*) {
  io_list_select_cb(o);
}
void UserInterface::cb_io_list(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_list_i(o,v);
}

inline void UserInterface::cb_io_new_i(Fl_Button*, void*) {
  io_list_new_cb();
}
void UserInterface::cb_io_new(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_new_i(o,v);
}

inline void UserInterface::cb_io_delete_i(Fl_Button*, void*) {
  if (io_list->value() > 0) {
  io_list->remove( io_list->value() );
};
}
void UserInterface::cb_io_delete(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_delete_i(o,v);
}

inline void UserInterface::cb_io_protocol_i(Fl_Choice*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_io_protocol(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_protocol_i(o,v);
}

Fl_Menu_Item UserInterface::menu_io_protocol[] = {
 {"atc610x", 0,  0, 0, 0, 0, 0, 12, 56},
 {"atlas", 0,  0, 0, 0, 0, 0, 12, 56},
 {"garmin", 0,  0, 0, 0, 0, 0, 12, 56},
 {"generic", 0,  0, 0, 0, 0, 0, 12, 56},
 {"joy-client", 0,  0, 0, 0, 0, 0, 12, 56},
 {"native", 0,  0, 0, 0, 0, 0, 12, 56},
 {"native-ctrls", 0,  0, 0, 0, 0, 0, 12, 56},
 {"native-fdm", 0,  0, 0, 0, 0, 0, 12, 56},
 {"native-gui", 0,  0, 0, 0, 0, 0, 12, 56},
 {"nmea", 0,  0, 0, 0, 0, 0, 12, 56},
 {"opengc", 0,  0, 0, 0, 0, 0, 12, 56},
 {"pve", 0,  0, 0, 0, 0, 0, 12, 56},
 {"props", 0,  0, 0, 0, 0, 0, 12, 56},
 {"ray", 0,  0, 0, 0, 0, 0, 12, 56},
 {"rul", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

inline void UserInterface::cb_io_medium_i(Fl_Choice* o, void*) {
  io_list_medium_update_cb( o );
}
void UserInterface::cb_io_medium(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_medium_i(o,v);
}

Fl_Menu_Item UserInterface::menu_io_medium[] = {
 {"file", 0,  0, 0, 0, 0, 0, 12, 56},
 {"serial", 0,  0, 0, 0, 0, 0, 12, 56},
 {"socket", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

inline void UserInterface::cb_io_dir_i(Fl_Choice*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_io_dir(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_dir_i(o,v);
}

Fl_Menu_Item UserInterface::menu_io_dir[] = {
 {"in", 0,  0, 0, 0, 0, 0, 12, 56},
 {"out", 0,  0, 0, 0, 0, 0, 12, 56},
 {"bi", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

inline void UserInterface::cb_io_hz_i(Fl_Value_Input*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_io_hz(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_io_hz_i(o,v);
}

inline void UserInterface::cb_file_name_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_file_name(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_file_name_i(o,v);
}

inline void UserInterface::cb_serial_port_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_serial_port(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_serial_port_i(o,v);
}

inline void UserInterface::cb_serial_baud_rate_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_serial_baud_rate(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_serial_baud_rate_i(o,v);
}

inline void UserInterface::cb_socket_host_i(Fl_Input*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_socket_host(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_socket_host_i(o,v);
}

inline void UserInterface::cb_socket_port_i(Fl_Value_Input*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_socket_port(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_socket_port_i(o,v);
}

inline void UserInterface::cb_socket_tcp_i(Fl_Round_Button*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_socket_tcp(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_socket_tcp_i(o,v);
}

inline void UserInterface::cb_socket_udp_i(Fl_Round_Button*, void*) {
  io_list_update_cb();
}
void UserInterface::cb_socket_udp(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_socket_udp_i(o,v);
}

inline void UserInterface::cb_prop_list_i(Fl_Browser* o, void*) {
  prop_list_select_cb( o );
}
void UserInterface::cb_prop_list(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_prop_list_i(o,v);
}

inline void UserInterface::cb_prop_delete_i(Fl_Button*, void*) {
  prop_delete_cb();
}
void UserInterface::cb_prop_delete(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_prop_delete_i(o,v);
}

inline void UserInterface::cb_prop_text_i(Fl_Input*, void*) {
  prop_list_update_cb();
}
void UserInterface::cb_prop_text(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_prop_text_i(o,v);
}

inline void UserInterface::cb_New_i(Fl_Button*, void*) {
  prop_new_cb();
}
void UserInterface::cb_New(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_New_i(o,v);
}

Fl_Menu_Item UserInterface::menu_log_level[] = {
 {"Verbose", 0,  0, 0, 0, 0, 0, 12, 56},
 {"Debug", 0,  0, 0, 0, 0, 0, 12, 56},
 {"Info", 0,  0, 0, 0, 0, 0, 12, 56},
 {"Warnings", 0,  0, 0, 0, 0, 0, 12, 56},
 {"Alerts", 0,  0, 0, 0, 0, 0, 12, 56},
 {0}
};

inline void UserInterface::cb_env_list_i(Fl_Browser* o, void*) {
  env_list_select_cb(o);
}
void UserInterface::cb_env_list(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_env_list_i(o,v);
}

inline void UserInterface::cb_New1_i(Fl_Button*, void*) {
  env_new_cb();
}
void UserInterface::cb_New1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_New1_i(o,v);
}

inline void UserInterface::cb_env_delete_i(Fl_Button*, void*) {
  env_delete_cb();
}
void UserInterface::cb_env_delete(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_env_delete_i(o,v);
}

inline void UserInterface::cb_env_var_i(Fl_Input*, void*) {
  env_list_update_cb();
}
void UserInterface::cb_env_var(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_env_var_i(o,v);
}

UserInterface::UserInterface() {
  Fl_Window* w;
  { Fl_Window* o = main_window = new Fl_Window(640, 480, "FlightGear Launch Control");
    w = o;
    o->labelsize(12);
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 640, 25);
      o->labelsize(12);
      o->textsize(12);
      o->menu(menu_);
    }
    { Fl_Browser* o = page_list = new Fl_Browser(0, 25, 150, 420);
      o->type(2);
      o->labelsize(12);
      o->textsize(12);
      o->callback((Fl_Callback*)cb_page_list);
    }
    { Fl_Button* o = run = new Fl_Button(585, 450, 50, 25, "Run");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_run);
    }
    { Fl_Button* o = new Fl_Button(530, 450, 50, 25, "Save");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Save1);
    }
    { Fl_Button* o = new Fl_Button(475, 450, 50, 25, "Reset");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Reset);
    }
    { Fl_Group* o = page[0] = new Fl_Group(150, 25, 490, 420, "General");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Input* o = fg_exe = new Fl_Input(250, 50, 355, 25, "Executable:");
        o->tooltip("Filename of FlightGear executable");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Button* o = new Fl_Button(610, 50, 25, 25, "...");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_);
      }
      { Fl_Input* o = fg_root = new Fl_Input(250, 80, 355, 25, "FG_ROOT:");
        o->tooltip("root data path");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Button* o = new Fl_Button(610, 80, 25, 25, "...");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_1);
      }
      { Fl_Input* o = fg_scenery = new Fl_Input(250, 110, 355, 25, "FG_SCENERY:");
        o->tooltip("Base scenery path");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Button* o = new Fl_Button(610, 110, 25, 25, "...");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_2);
      }
      { Fl_Choice* o = airport = new Fl_Choice(250, 140, 150, 25, "Airports:");
        o->tooltip("Available airports");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_airport);
        o->deactivate();
        int i = airport->add( "KSFO", 0, 0, 0, 0);
        airport->value(i);
      }
      { Fl_Button* o = airport_update = new Fl_Button(405, 140, 60, 25, "Update");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_airport_update);
        o->deactivate();
      }
      { Fl_Choice* o = aircraft = new Fl_Choice(250, 170, 150, 25, "Aircraft:");
        o->tooltip("Available aircraft types");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        int i = aircraft->add("c172", 0, 0, 0, 0);
        aircraft->value(i);
      }
      { Fl_Button* o = aircraft_update = new Fl_Button(405, 170, 60, 25, "Update");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_aircraft_update);
        o->deactivate();
      }
      { Fl_Choice* o = control = new Fl_Choice(250, 200, 150, 25, "Control:");
        o->tooltip("Primary control mode");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->menu(menu_control);
      }
      { Fl_Input* o = lang = new Fl_Input(250, 245, 80, 25, "Language:");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = browser = new Fl_Input(250, 275, 355, 25, "Browser:");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Button* o = new Fl_Button(610, 275, 25, 25, "...");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_3);
      }
      { Fl_Input* o = config = new Fl_Input(250, 305, 355, 25, "Config:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Button* o = new Fl_Button(610, 305, 25, 25, "...");
        o->labelsize(12);
        o->deactivate();
      }
      { Fl_Choice* o = runway = new Fl_Choice(525, 140, 80, 25, "Runway:");
        o->tooltip("Available runways");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      o->end();
    }
    { Fl_Group* o = page[1] = new Fl_Group(150, 25, 490, 420, "Features");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Check_Button* o = game_mode = new Fl_Check_Button(175, 50, 120, 25, "Game Mode");
        o->tooltip("Enable full screen game mode");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = splash_screen = new Fl_Check_Button(175, 80, 120, 25, "Splash Screen");
        o->tooltip("Display splash screen at startup");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = intro_music = new Fl_Check_Button(175, 110, 120, 25, "Intro Music");
        o->tooltip("Enable introduction music during start up");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = mouse_pointer = new Fl_Check_Button(175, 140, 120, 25, "Mouse Pointer");
        o->tooltip("Enable extra mouse pointer");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = random_objects = new Fl_Check_Button(175, 170, 120, 25, "Random Objects");
        o->tooltip("Enable random scenery objects");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = panel = new Fl_Check_Button(295, 50, 120, 25, "Panel");
        o->tooltip("Enable the instrument panel");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = sound = new Fl_Check_Button(295, 80, 120, 25, "Sound");
        o->tooltip("Enable sound effects");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = hud = new Fl_Check_Button(295, 110, 120, 25, "HUD");
        o->tooltip("Enable Heads Up Display");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_hud);
      }
      { Fl_Check_Button* o = antialias_hud = new Fl_Check_Button(295, 140, 120, 25, "Anti-alias HUD");
        o->tooltip("Enable anti-aliased HUD");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->deactivate();
      }
      { Fl_Check_Button* o = auto_coordination = new Fl_Check_Button(295, 170, 120, 25, "Auto-coordination");
        o->tooltip("Enable auto-coordinated turns.");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = horizon_effect = new Fl_Check_Button(175, 200, 120, 25, "Horizon effect");
        o->tooltip("Enable celestial body growth illusion near the horizon");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = enhanced_lighting = new Fl_Check_Button(175, 225, 120, 25, "Enhanced lighting");
        o->tooltip("Enable enhanced runway lighting");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = distance_attenuation = new Fl_Check_Button(175, 255, 120, 25, "Distance attenuation");
        o->tooltip("Enable runway light distance attenuation");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      o->end();
    }
    { Fl_Group* o = page[2] = new Fl_Group(150, 25, 490, 420, "Flight Model");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Choice* o = fdm = new Fl_Choice(220, 60, 105, 25, "FDM:");
        o->tooltip("Core Flight Dynamics Model");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_fdm);
        o->menu(menu_fdm);
      }
      { Fl_Check_Button* o = notrim = new Fl_Check_Button(240, 90, 85, 25, "No Trim");
        o->tooltip("Do not attempt to trim the model");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->deactivate();
      }
      { Fl_Value_Input* o = model_hz = new Fl_Value_Input(220, 120, 105, 25, "Model Hz:");
        o->tooltip("Run the FDM at this rate (iterations per second)");
        o->labelsize(12);
        o->minimum(1);
        o->maximum(1000);
        o->step(1);
        o->value(120);
        o->textsize(12);
      }
      { Fl_Value_Input* o = speed = new Fl_Value_Input(220, 150, 105, 25, "Speed:");
        o->tooltip("Run FDM faster than real time");
        o->labelsize(12);
        o->minimum(1);
        o->maximum(1000);
        o->step(1);
        o->value(1);
        o->textsize(12);
      }
      { Fl_Group* o = new Fl_Group(220, 185, 105, 50);
        { Fl_Round_Button* o = on_ground = new Fl_Round_Button(220, 185, 105, 25, "On Ground");
          o->tooltip("Start at ground level");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = in_air = new Fl_Round_Button(220, 210, 105, 25, "In Air");
          o->tooltip("Start in the air");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->labelsize(12);
        }
        o->end();
      }
      { Fl_Input* o = wind = new Fl_Input(220, 240, 105, 25, "Wind:");
        o->tooltip("Wind direction and speed, dir@speed");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = turbulence = new Fl_Input(220, 270, 105, 25, "Turbulence");
        o->tooltip("Turbulence, 0.0 (calm) to 1.0 (severe)");
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = page[3] = new Fl_Group(150, 25, 490, 420, "Freeze");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Check_Button* o = freeze = new Fl_Check_Button(175, 50, 120, 25, "Freeze");
        o->tooltip("Start paused");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = fuel_freeze = new Fl_Check_Button(175, 80, 120, 25, "Fuel Freeze");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = clock_freeze = new Fl_Check_Button(175, 110, 120, 25, "Clock Freeze");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      o->end();
    }
    { Fl_Group* o = page[4] = new Fl_Group(150, 25, 490, 420, "Initial Position");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Input* o = lon = new Fl_Input(225, 50, 150, 25, "Longitude:");
        o->tooltip("Initial longitude, west is negative");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = lat = new Fl_Input(225, 80, 150, 25, "Latitude:");
        o->tooltip("Initial latitude, south is negative");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = altitude = new Fl_Input(225, 110, 150, 25, "Altitude:");
        o->tooltip("Initial altitude in feet");
        o->type(1);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = vc = new Fl_Input(225, 230, 150, 25, "Airspeed:");
        o->tooltip("Initial airspeed in knots");
        o->type(1);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = uBody = new Fl_Input(225, 280, 150, 25, "uBody:");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = vBody = new Fl_Input(225, 310, 150, 25, "vBody:");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = wBody = new Fl_Input(225, 340, 150, 25, "wBody");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Input* o = heading = new Fl_Value_Input(225, 140, 150, 25, "Heading:");
        o->tooltip("Initial aircraft heading (yaw) angle 0 to 360 degreesInitial aircraft heading\
 (yaw) angle (Psi)");
        o->labelsize(12);
        o->maximum(360);
        o->step(1);
        o->textsize(12);
      }
      { Fl_Value_Input* o = roll = new Fl_Value_Input(225, 170, 150, 25, "Roll:");
        o->tooltip("Initial roll angle, (Phi)");
        o->labelsize(12);
        o->minimum(-180);
        o->maximum(180);
        o->step(0.1);
        o->textsize(12);
      }
      { Fl_Value_Input* o = pitch = new Fl_Value_Input(225, 200, 150, 25, "Pitch:");
        o->tooltip("Initial pitch angle (Theta)");
        o->labelsize(12);
        o->minimum(-180);
        o->maximum(180);
        o->step(0.1);
        o->textsize(12);
      }
      { Fl_Input* o = vor = new Fl_Input(520, 50, 80, 25, "VOR:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Input* o = ndb = new Fl_Input(520, 80, 80, 25, "NDB:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Input* o = fix = new Fl_Input(520, 110, 80, 25, "Fix:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Input* o = offset_distance = new Fl_Input(520, 140, 80, 25, "offset distance:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Input* o = offset_azimuth = new Fl_Input(520, 170, 80, 25, "offset azimuth:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Input* o = glideslope = new Fl_Input(520, 200, 80, 25, "Glide slope:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      { Fl_Input* o = roc = new Fl_Input(520, 230, 80, 25, "Climb rate:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      o->end();
    }
    { Fl_Group* o = page[5] = new Fl_Group(150, 25, 490, 420, "Rendering");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Check_Button* o = clouds = new Fl_Check_Button(180, 55, 120, 25, "Clouds");
        o->tooltip("Enable 2D (flat) cloud layers");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = clouds3d = new Fl_Check_Button(180, 85, 120, 25, "3D Clouds");
        o->tooltip("Enable 3D (volumetric) cloud layers");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = fullscreen = new Fl_Check_Button(180, 115, 120, 25, "Full Screen");
        o->tooltip("Enable full screen mode");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = skyblend = new Fl_Check_Button(180, 145, 120, 25, "Sky Blend");
        o->tooltip("Enable sky blending");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = textures = new Fl_Check_Button(180, 175, 120, 25, "Textures");
        o->tooltip("Enable textures");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Check_Button* o = wireframe = new Fl_Check_Button(180, 205, 120, 25, "Wireframe");
        o->tooltip("Enable wireframe drawing mode");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Group* o = new Fl_Group(315, 60, 120, 100, "Shading");
        o->labelfont(1);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        { Fl_Round_Button* o = shading_smooth = new Fl_Round_Button(330, 85, 105, 25, "Smooth");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = shading_flat = new Fl_Round_Button(330, 110, 105, 25, "Flat");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->labelsize(12);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(450, 60, 120, 100, "Fog");
        o->labelfont(1);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        { Fl_Round_Button* o = fog_disabled = new Fl_Round_Button(460, 85, 110, 25, "Disabled");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = fog_fastest = new Fl_Round_Button(460, 110, 110, 25, "Fastest");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = fog_nicest = new Fl_Round_Button(460, 135, 110, 25, "Nicest");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
        }
        o->end();
      }
      { Fl_Input* o = geometry = new Fl_Input(225, 280, 120, 25, "Geometry:");
        o->tooltip("Window geometry, WxH");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = visibility = new Fl_Input(225, 310, 120, 25, "Visibility:");
        o->tooltip("Initial visibility distance");
        o->type(1);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Group* o = new Fl_Group(225, 335, 120, 25);
        { Fl_Round_Button* o = vis_meters = new Fl_Round_Button(225, 335, 60, 25, "Meters");
          o->tooltip("Specify visibilty in meters");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = vis_miles = new Fl_Round_Button(285, 335, 60, 25, "Miles");
          o->tooltip("Specify visiblity in miles");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->labelsize(12);
        }
        o->end();
      }
      { Fl_Input* o = view_offset = new Fl_Input(450, 280, 120, 25, "View Offset:");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Choice* o = bpp = new Fl_Choice(450, 310, 120, 25, "bpp:");
        o->tooltip("Color depth (bits per pixel)");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->menu(menu_bpp);
      }
      { Fl_Value_Input* o = fov = new Fl_Value_Input(450, 340, 120, 25, "FOV:");
        o->tooltip("Field of View angle");
        o->labelsize(12);
        o->minimum(1);
        o->maximum(360);
        o->value(60);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = page[6] = new Fl_Group(150, 25, 490, 420, "Time");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Round_Button* o = time_match_real = new Fl_Round_Button(175, 50, 140, 25, "Time match real");
        o->tooltip("Synchronize simulation time with real time");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
      }
      { Fl_Round_Button* o = time_match_local = new Fl_Round_Button(175, 80, 140, 25, "Time match local");
        o->tooltip("Synchronize simulation time with local time");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
      }
      { Fl_Round_Button* o = start_date_sys = new Fl_Round_Button(175, 110, 140, 25, "Start date sys");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_start_date_sys);
      }
      { Fl_Round_Button* o = start_date_gmt = new Fl_Round_Button(175, 140, 140, 25, "Start date gmt");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_start_date_gmt);
      }
      { Fl_Round_Button* o = start_date_lat = new Fl_Round_Button(175, 170, 140, 25, "Start date lat");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_start_date_lat);
      }
      { Fl_Input* o = time_offset_value = new Fl_Input(315, 50, 140, 25);
        o->tooltip("Offset (+/-) from real time");
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_time_offset_value);
        o->when(3);
      }
      { Fl_Input* o = start_date_sys_value = new Fl_Input(315, 110, 140, 25);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_start_date_sys_value);
        o->when(3);
      }
      { Fl_Input* o = start_date_gmt_value = new Fl_Input(315, 140, 140, 25);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_start_date_gmt_value);
        o->when(3);
      }
      { Fl_Input* o = start_date_lat_value = new Fl_Input(315, 170, 140, 25);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_start_date_lat_value);
        o->when(3);
      }
      o->end();
    }
    { Fl_Group* o = page[7] = new Fl_Group(150, 25, 490, 420, "Network");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Check_Button* o = httpd = new Fl_Check_Button(175, 50, 100, 25, "httpd");
        o->tooltip("Enable HTTP server");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_httpd);
      }
      { Fl_Value_Input* o = httpd_port = new Fl_Value_Input(275, 50, 100, 25);
        o->tooltip("HTTP server port");
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->minimum(1025);
        o->maximum(65535);
        o->value(5500);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_httpd_port);
        o->when(3);
      }
      { Fl_Check_Button* o = props = new Fl_Check_Button(175, 80, 100, 25, "props");
        o->tooltip("Enable property server");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_props);
      }
      { Fl_Value_Input* o = props_port = new Fl_Value_Input(275, 80, 100, 25);
        o->tooltip("Property server port");
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->minimum(1025);
        o->maximum(65535);
        o->value(5501);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_props_port);
      }
      { Fl_Check_Button* o = jpg_httpd = new Fl_Check_Button(175, 110, 100, 25, "jpg-httpd");
        o->tooltip("Enable screen shot HTTP server");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_jpg_httpd);
      }
      { Fl_Value_Input* o = jpg_httpd_port = new Fl_Value_Input(275, 110, 100, 25);
        o->tooltip("Screen shot HTTP server port");
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->minimum(1025);
        o->maximum(65535);
        o->value(5502);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_jpg_httpd_port);
      }
      { Fl_Check_Button* o = network_olk = new Fl_Check_Button(175, 170, 100, 25, "network-olk");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_network_olk);
        o->deactivate();
      }
      { Fl_Check_Button* o = net_hud = new Fl_Check_Button(175, 195, 100, 25, "net-hud");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(12);
        o->deactivate();
      }
      { Fl_Input* o = net_id = new Fl_Input(215, 225, 100, 25, "net ID:");
        o->labelsize(12);
        o->textsize(12);
        o->deactivate();
      }
      o->end();
    }
    { Fl_Group* o = page[8] = new Fl_Group(150, 25, 490, 420, "Input/Output");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Browser* o = io_list = new Fl_Browser(155, 55, 480, 125);
        o->type(2);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_io_list);
      }
      { Fl_Button* o = io_new = new Fl_Button(520, 200, 55, 25, "New");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_io_new);
      }
      { Fl_Button* o = io_delete = new Fl_Button(580, 200, 55, 25, "Delete");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_io_delete);
        o->deactivate();
      }
      { Fl_Choice* o = io_protocol = new Fl_Choice(220, 200, 125, 25, "Protocol:");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_io_protocol);
        o->deactivate();
        o->menu(menu_io_protocol);
      }
      { Fl_Choice* o = io_medium = new Fl_Choice(220, 230, 125, 25, "Medium:");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_io_medium);
        o->when(FL_WHEN_RELEASE_ALWAYS);
        o->deactivate();
        o->menu(menu_io_medium);
      }
      { Fl_Choice* o = io_dir = new Fl_Choice(220, 260, 125, 25, "Direction:");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_io_dir);
        o->deactivate();
        o->menu(menu_io_dir);
      }
      { Fl_Value_Input* o = io_hz = new Fl_Value_Input(220, 290, 125, 25, "Hz:");
        o->labelsize(12);
        o->minimum(1);
        o->maximum(1000);
        o->value(5);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_io_hz);
        o->deactivate();
      }
      { Fl_Group* o = file_group = new Fl_Group(150, 320, 245, 115);
        o->hide();
        { Fl_Input* o = file_name = new Fl_Input(220, 320, 125, 25, "File:");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_file_name);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Button* o = new Fl_Button(350, 320, 25, 25, "...");
          o->labelsize(12);
        }
        o->end();
      }
      { Fl_Group* o = serial_group = new Fl_Group(150, 320, 245, 115);
        o->hide();
        { Fl_Input* o = serial_port = new Fl_Input(220, 320, 125, 25, "Port:");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_serial_port);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Input* o = serial_baud_rate = new Fl_Input(220, 350, 125, 25, "Baud Rate:");
          o->type(2);
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_serial_baud_rate);
          o->when(FL_WHEN_CHANGED);
        }
        o->end();
      }
      { Fl_Group* o = socket_group = new Fl_Group(150, 320, 245, 115);
        o->hide();
        { Fl_Input* o = socket_host = new Fl_Input(220, 320, 125, 25, "Hostname:");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_socket_host);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Value_Input* o = socket_port = new Fl_Value_Input(220, 350, 125, 25, "Port:");
          o->labelsize(12);
          o->minimum(1024);
          o->maximum(65535);
          o->step(1);
          o->value(5500);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_socket_port);
        }
        { Fl_Round_Button* o = socket_tcp = new Fl_Round_Button(220, 380, 55, 25, "TCP");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_socket_tcp);
        }
        { Fl_Round_Button* o = socket_udp = new Fl_Round_Button(290, 380, 55, 25, "UDP");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_socket_udp);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = page[9] = new Fl_Group(150, 25, 490, 420, "Properties");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Browser* o = prop_list = new Fl_Browser(155, 55, 480, 125);
        o->type(2);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_prop_list);
      }
      { Fl_Button* o = prop_delete = new Fl_Button(580, 200, 55, 25, "Delete");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_prop_delete);
        o->deactivate();
      }
      { Fl_Input* o = prop_text = new Fl_Input(220, 200, 290, 25, "Property:");
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_prop_text);
        o->when(FL_WHEN_CHANGED);
        o->deactivate();
      }
      { Fl_Button* o = new Fl_Button(520, 200, 55, 25, "New");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_New);
      }
      o->end();
    }
    { Fl_Group* o = page[10] = new Fl_Group(150, 25, 490, 420, "Debugging");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Choice* o = log_level = new Fl_Choice(225, 60, 90, 25, "Log Level:");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->menu(menu_log_level);
      }
      o->end();
    }
    { Fl_Group* o = page[11] = new Fl_Group(150, 25, 490, 420, "Environment");
      o->labelfont(1);
      o->labelsize(16);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      o->hide();
      { Fl_Browser* o = env_list = new Fl_Browser(155, 55, 480, 125);
        o->type(2);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_env_list);
      }
      { Fl_Button* o = new Fl_Button(520, 200, 55, 25, "New");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_New1);
      }
      { Fl_Button* o = env_delete = new Fl_Button(580, 200, 55, 25, "Delete");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_env_delete);
        o->deactivate();
      }
      { Fl_Input* o = env_var = new Fl_Input(220, 200, 295, 25, "Value:");
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_env_var);
        o->when(FL_WHEN_CHANGED);
        o->deactivate();
      }
      o->end();
    }
    init();
    o->end();
  }
}

void UserInterface::show() {
  main_window->show();
}

void UserInterface::run_fgfs_impl() {
}

void update_aircraft_cb(void* v) {
  ((UserInterface*)v)->update_aircraft();
Fl::remove_idle( update_aircraft_cb, v );
}
